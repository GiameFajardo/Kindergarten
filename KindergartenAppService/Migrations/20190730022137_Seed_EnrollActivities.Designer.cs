// <auto-generated />
using System;
using KindergartenAppService.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KindergartenAppService.Migrations
{
    [DbContext(typeof(KindergarterContext))]
    [Migration("20190730022137_Seed_EnrollActivities")]
    partial class Seed_EnrollActivities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KindergartenAppService.Models.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityTemplateId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ActivityTemplateId");

                    b.ToTable("Activity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("53528a0f-bfa6-4d22-a5d5-0041ab668277"),
                            ActivityTemplateId = new Guid("2ffbfdd4-14a7-4a54-9e6d-21c80027267f"),
                            Description = "Clases de ingles"
                        },
                        new
                        {
                            Id = new Guid("ce169702-f578-4602-8668-9221ff4c772c"),
                            ActivityTemplateId = new Guid("197a84ce-7546-4a1f-8274-8ed92f5f5197"),
                            Description = "Cuidade matutino"
                        },
                        new
                        {
                            Id = new Guid("710e6930-b848-4ebb-8c3e-b30e8b15d381"),
                            ActivityTemplateId = new Guid("39375427-76fd-4e5d-8e5d-0fa81b7f38f2"),
                            Description = "Cuidado Vespertino"
                        },
                        new
                        {
                            Id = new Guid("d9ea92a0-ea49-44e3-8725-e6f71e3a5fe9"),
                            ActivityTemplateId = new Guid("5728a637-b4ec-4ee3-a75e-2e8470f18443"),
                            Description = "Cuidado dia completo"
                        },
                        new
                        {
                            Id = new Guid("c42834e4-38d6-4595-8bef-cd10a9fb76d4"),
                            ActivityTemplateId = new Guid("cc319f79-27ee-43b8-ad3d-cfa8d1428442"),
                            Description = "Clases de Ballet"
                        },
                        new
                        {
                            Id = new Guid("4f84167d-bef4-43c9-8d53-09e8721ce49a"),
                            ActivityTemplateId = new Guid("c3354e05-6f04-4327-a282-158fb3eb2a1c"),
                            Description = "Clases de logica"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.ActivityTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<Guid>("KindergarterId");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.ToTable("ActivityTemplate");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ffbfdd4-14a7-4a54-9e6d-21c80027267f"),
                            Description = "Clases de ingles",
                            KindergarterId = new Guid("e75c087f-ed5f-45f7-ad4d-9082fac3f9f0")
                        },
                        new
                        {
                            Id = new Guid("197a84ce-7546-4a1f-8274-8ed92f5f5197"),
                            Description = "Cuidade matutino",
                            KindergarterId = new Guid("e75c087f-ed5f-45f7-ad4d-9082fac3f9f0")
                        },
                        new
                        {
                            Id = new Guid("39375427-76fd-4e5d-8e5d-0fa81b7f38f2"),
                            Description = "Cuidado Vespertino",
                            KindergarterId = new Guid("e75c087f-ed5f-45f7-ad4d-9082fac3f9f0")
                        },
                        new
                        {
                            Id = new Guid("5728a637-b4ec-4ee3-a75e-2e8470f18443"),
                            Description = "Cuidado dia completo",
                            KindergarterId = new Guid("e75c087f-ed5f-45f7-ad4d-9082fac3f9f0")
                        },
                        new
                        {
                            Id = new Guid("cc319f79-27ee-43b8-ad3d-cfa8d1428442"),
                            Description = "Clases de Ballet",
                            KindergarterId = new Guid("e75c087f-ed5f-45f7-ad4d-9082fac3f9f0")
                        },
                        new
                        {
                            Id = new Guid("c3354e05-6f04-4327-a282-158fb3eb2a1c"),
                            Description = "Clases de logica",
                            KindergarterId = new Guid("e75c087f-ed5f-45f7-ad4d-9082fac3f9f0")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.EnrollActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityId");

                    b.Property<Guid?>("EnrollmentId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EnrollmentId");

                    b.ToTable("EnrollActivity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5756f886-dcc3-428f-825d-a8f1da65f983"),
                            ActivityId = new Guid("c42834e4-38d6-4595-8bef-cd10a9fb76d4")
                        },
                        new
                        {
                            Id = new Guid("35e6fa9d-1c72-4290-be5f-fa9a3ed8b2ea"),
                            ActivityId = new Guid("710e6930-b848-4ebb-8c3e-b30e8b15d381")
                        },
                        new
                        {
                            Id = new Guid("24f59242-6cc1-48fa-b544-16735c5ed5d1"),
                            ActivityId = new Guid("d9ea92a0-ea49-44e3-8725-e6f71e3a5fe9")
                        },
                        new
                        {
                            Id = new Guid("fc79897b-c37e-4d9b-a56d-0634d3d46888"),
                            ActivityId = new Guid("ce169702-f578-4602-8668-9221ff4c772c")
                        },
                        new
                        {
                            Id = new Guid("bb02ec79-150d-4936-aaba-9c052a208d7b"),
                            ActivityId = new Guid("d9ea92a0-ea49-44e3-8725-e6f71e3a5fe9")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime>("EnrollDay");

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId")
                        .IsUnique();

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9246d9d4-9be9-440d-aab7-fe620052935c"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("006ad93b-0987-412d-8b4f-03d8f05bb683")
                        },
                        new
                        {
                            Id = new Guid("8b278c80-7658-4774-b21b-773852393516"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("0071536b-710d-45ae-9b09-d3f5b013a1f0")
                        },
                        new
                        {
                            Id = new Guid("5bd39bdc-55ee-463a-a908-86668060d2fd"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("00895b03-1022-4604-a98e-c152a383ee6a")
                        },
                        new
                        {
                            Id = new Guid("1e12a9da-eae6-4fa6-9491-57b6c2556a9b"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("01f528cb-b26e-4591-96f6-08cfd77adb1a")
                        },
                        new
                        {
                            Id = new Guid("670ffef5-8cdb-41fd-ba98-d244787f81e8"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("03e2ced5-3c50-4f7c-9914-e6011d6706ad")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Feeding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Feeding");
                });

            modelBuilder.Entity("KindergartenAppService.Models.FeedingKid", b =>
                {
                    b.Property<Guid>("KidId");

                    b.Property<Guid>("FeddingId");

                    b.HasKey("KidId", "FeddingId");

                    b.HasIndex("FeddingId");

                    b.ToTable("FeedingKid");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("KindergartenAppService.Models.InvoiceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<Guid?>("InvoiceId");

                    b.Property<Guid>("ItemId");

                    b.Property<decimal>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ItemId");

                    b.ToTable("InvoiceDetail");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.Property<string>("Reference")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Item");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Item");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FatherName")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<Guid>("KindergarterId");

                    b.Property<string>("MotherName");

                    b.Property<string>("SecondName");

                    b.Property<Guid>("TutorId");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.HasIndex("TutorId");

                    b.ToTable("Kid");

                    b.HasData(
                        new
                        {
                            Id = new Guid("006ad93b-0987-412d-8b4f-03d8f05bb683"),
                            FatherName = "Faringtom",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("e75c087f-ed5f-45f7-ad4d-9082fac3f9f0"),
                            MotherName = "Washinton",
                            SecondName = "Emilio",
                            TutorId = new Guid("68c9f6f8-54de-465f-a05c-c5fec4dccbb0")
                        },
                        new
                        {
                            Id = new Guid("0071536b-710d-45ae-9b09-d3f5b013a1f0"),
                            FatherName = "Escobar",
                            FirstName = "Aaron",
                            KindergarterId = new Guid("e75c087f-ed5f-45f7-ad4d-9082fac3f9f0"),
                            MotherName = "Snow",
                            SecondName = "Carlos",
                            TutorId = new Guid("68c9f6f8-54de-465f-a05c-c5fec4dccbb0")
                        },
                        new
                        {
                            Id = new Guid("00895b03-1022-4604-a98e-c152a383ee6a"),
                            FatherName = "Faringtom",
                            FirstName = "Johan",
                            KindergarterId = new Guid("e75c087f-ed5f-45f7-ad4d-9082fac3f9f0"),
                            MotherName = "Worm",
                            SecondName = "Enrique",
                            TutorId = new Guid("68c9f6f8-54de-465f-a05c-c5fec4dccbb0")
                        },
                        new
                        {
                            Id = new Guid("01f528cb-b26e-4591-96f6-08cfd77adb1a"),
                            FatherName = "Stackeetam",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("e75c087f-ed5f-45f7-ad4d-9082fac3f9f0"),
                            MotherName = "Snow",
                            SecondName = "Carlos",
                            TutorId = new Guid("68c9f6f8-54de-465f-a05c-c5fec4dccbb0")
                        },
                        new
                        {
                            Id = new Guid("03e2ced5-3c50-4f7c-9914-e6011d6706ad"),
                            FatherName = "Escobar",
                            FirstName = "Johan",
                            KindergarterId = new Guid("e75c087f-ed5f-45f7-ad4d-9082fac3f9f0"),
                            MotherName = "Worm",
                            SecondName = "Carlos",
                            TutorId = new Guid("68c9f6f8-54de-465f-a05c-c5fec4dccbb0")
                        },
                        new
                        {
                            Id = new Guid("0413ecd2-8c06-40e0-a6bc-0e7d8abd7a6d"),
                            FatherName = "Stackeetam",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("e75c087f-ed5f-45f7-ad4d-9082fac3f9f0"),
                            MotherName = "White",
                            SecondName = "Emilio",
                            TutorId = new Guid("68c9f6f8-54de-465f-a05c-c5fec4dccbb0")
                        },
                        new
                        {
                            Id = new Guid("04f89858-2075-4377-9e7c-786fef73b8aa"),
                            FatherName = "Stackeetam",
                            FirstName = "Lyan",
                            KindergarterId = new Guid("e75c087f-ed5f-45f7-ad4d-9082fac3f9f0"),
                            MotherName = "Worm",
                            SecondName = "Eduardo",
                            TutorId = new Guid("68c9f6f8-54de-465f-a05c-c5fec4dccbb0")
                        },
                        new
                        {
                            Id = new Guid("0555f3b2-c03f-4591-a154-2d28d6915c14"),
                            FatherName = "Faringtom",
                            FirstName = "Johan",
                            KindergarterId = new Guid("e75c087f-ed5f-45f7-ad4d-9082fac3f9f0"),
                            MotherName = "Snow",
                            SecondName = "Enrique",
                            TutorId = new Guid("68c9f6f8-54de-465f-a05c-c5fec4dccbb0")
                        },
                        new
                        {
                            Id = new Guid("07454bdb-9c63-4718-8d52-77086e8bcefa"),
                            FatherName = "Stackeetam",
                            FirstName = "Lyan",
                            KindergarterId = new Guid("e75c087f-ed5f-45f7-ad4d-9082fac3f9f0"),
                            MotherName = "Snow",
                            SecondName = "Carlos",
                            TutorId = new Guid("68c9f6f8-54de-465f-a05c-c5fec4dccbb0")
                        },
                        new
                        {
                            Id = new Guid("08cf2771-3631-492e-ad24-3c0d63af3be9"),
                            FatherName = "Faringtom",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("e75c087f-ed5f-45f7-ad4d-9082fac3f9f0"),
                            MotherName = "White",
                            SecondName = "Emilio",
                            TutorId = new Guid("68c9f6f8-54de-465f-a05c-c5fec4dccbb0")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kindergarter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Kindergarters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e75c087f-ed5f-45f7-ad4d-9082fac3f9f0"),
                            Description = "KPH"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("MedicalRecord");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Payment", b =>
                {
                    b.Property<Guid>("InvoiceId");

                    b.Property<Guid>("ReceiptId");

                    b.HasKey("InvoiceId", "ReceiptId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Precense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KidId");

                    b.Property<DateTime>("PrecenseDay");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("Precense");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Receipt");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Stock", b =>
                {
                    b.Property<Guid>("StoreId");

                    b.Property<Guid>("ProductId");

                    b.HasKey("StoreId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.HasKey("Id");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("KindergartenAppService.Models.SubActivities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityId");

                    b.Property<DateTime>("Date");

                    b.Property<TimeSpan>("EndingTime");

                    b.Property<TimeSpan>("StaringTime");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("SubActivities");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Tutor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Mail");

                    b.Property<string>("MovilNumber");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Tutors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68c9f6f8-54de-465f-a05c-c5fec4dccbb0"),
                            FirstName = "Gregorio de Jesus",
                            LastName = "Rojas Acosta"
                        },
                        new
                        {
                            Id = new Guid("d73426b6-7a5b-4557-9f38-83f53eb93cf6"),
                            FirstName = "Yadira",
                            LastName = "Pinales Delgado"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KindergarterId");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Product", b =>
                {
                    b.HasBaseType("KindergartenAppService.Models.Item");

                    b.HasDiscriminator().HasValue("Product");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Service", b =>
                {
                    b.HasBaseType("KindergartenAppService.Models.Item");

                    b.Property<Guid>("ActivityId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("ServicePeriod");

                    b.HasIndex("ActivityId");

                    b.HasDiscriminator().HasValue("Service");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d10e5b3-dc0e-4e01-9329-ae6f281419f8"),
                            Price = 1597m,
                            Reference = "SRV-833",
                            ActivityId = new Guid("53528a0f-bfa6-4d22-a5d5-0041ab668277"),
                            Description = "Service Clases de ingles",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("551680a2-5177-4022-bb79-7426f9102c72"),
                            Price = 7671m,
                            Reference = "SRV-394",
                            ActivityId = new Guid("ce169702-f578-4602-8668-9221ff4c772c"),
                            Description = "Service Cuidade matutino",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("e8f814e1-c461-4796-b608-c9832ede7b89"),
                            Price = 1848m,
                            Reference = "SRV-696",
                            ActivityId = new Guid("710e6930-b848-4ebb-8c3e-b30e8b15d381"),
                            Description = "Service Cuidado Vespertino",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("3b67cb00-4f69-4a5f-a6f7-880b85bc086c"),
                            Price = 1989m,
                            Reference = "SRV-596",
                            ActivityId = new Guid("d9ea92a0-ea49-44e3-8725-e6f71e3a5fe9"),
                            Description = "Service Cuidado dia completo",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("a41df5fc-b714-4526-ad20-2777147f04f1"),
                            Price = 8988m,
                            Reference = "SRV-843",
                            ActivityId = new Guid("c42834e4-38d6-4595-8bef-cd10a9fb76d4"),
                            Description = "Service Clases de Ballet",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("e21898b2-b52c-4205-b0b6-d5ba318b2fce"),
                            Price = 5033m,
                            Reference = "SRV-313",
                            ActivityId = new Guid("4f84167d-bef4-43c9-8d53-09e8721ce49a"),
                            Description = "Service Clases de logica",
                            ServicePeriod = 77
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Activity", b =>
                {
                    b.HasOne("KindergartenAppService.Models.ActivityTemplate", "ActivityTemplate")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.ActivityTemplate", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("ActivityTemplates")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.EnrollActivity", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Enrollment")
                        .WithMany("EnrollActivities")
                        .HasForeignKey("EnrollmentId");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Enrollment", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithOne("Enrollment")
                        .HasForeignKey("KindergartenAppService.Models.Enrollment", "KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.FeedingKid", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Feeding", "Fedding")
                        .WithMany("FeedingKids")
                        .HasForeignKey("FeddingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("FeedingKids")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Invoice", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany()
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.InvoiceDetail", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("KindergartenAppService.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kid", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("Kids")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Tutor", "Tutor")
                        .WithMany("Kids")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.MedicalRecord", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Payment", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Receipt", "Receipt")
                        .WithMany("Payments")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Precense", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("Precenses")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Stock", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Product", "Product")
                        .WithMany("Stock")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Store", "Store")
                        .WithMany("Stock")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.SubActivities", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany("SubActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.User", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("Users")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Service", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
