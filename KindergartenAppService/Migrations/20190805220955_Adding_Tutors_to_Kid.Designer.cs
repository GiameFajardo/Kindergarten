// <auto-generated />
using System;
using KindergartenAppService.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KindergartenAppService.Migrations
{
    [DbContext(typeof(KindergarterContext))]
    [Migration("20190805220955_Adding_Tutors_to_Kid")]
    partial class Adding_Tutors_to_Kid
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KindergartenAppService.Models.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityTemplateId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ActivityTemplateId");

                    b.ToTable("Activity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8bb1277f-8967-4a2b-ac36-1c8d52050b68"),
                            ActivityTemplateId = new Guid("79603975-f59b-457f-bf3d-0efb44efa16e"),
                            Description = "Clases de ingles"
                        },
                        new
                        {
                            Id = new Guid("3312b7e3-c04a-4be2-8f9b-3cf4f574f288"),
                            ActivityTemplateId = new Guid("27af2180-3ff7-45fc-9743-4ed7bf5d6b98"),
                            Description = "Cuidade matutino"
                        },
                        new
                        {
                            Id = new Guid("a106b783-137c-474f-802a-61000f55952e"),
                            ActivityTemplateId = new Guid("ffd9e183-cf99-45d8-867e-3037b13bea8b"),
                            Description = "Cuidado Vespertino"
                        },
                        new
                        {
                            Id = new Guid("7fc358e5-25b1-4b42-8ebd-6b8c1e98f675"),
                            ActivityTemplateId = new Guid("4ea02d29-0ea6-4b83-b875-cede1059ad09"),
                            Description = "Cuidado dia completo"
                        },
                        new
                        {
                            Id = new Guid("66a4f647-dff5-4f81-b865-7a45427a68af"),
                            ActivityTemplateId = new Guid("e99eba97-ff7a-4bcd-95f6-10bcf5256041"),
                            Description = "Clases de Ballet"
                        },
                        new
                        {
                            Id = new Guid("1326f828-d5ef-4117-aaa4-7b1f4b34ac7e"),
                            ActivityTemplateId = new Guid("d915fe3a-b9a7-4b30-b3c4-e3c16c104c60"),
                            Description = "Clases de logica"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.ActivityTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<Guid>("KindergarterId");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.ToTable("ActivityTemplate");

                    b.HasData(
                        new
                        {
                            Id = new Guid("79603975-f59b-457f-bf3d-0efb44efa16e"),
                            Description = "Clases de ingles",
                            KindergarterId = new Guid("eb510eaa-d99b-4dbf-980a-0af1411a3a8d")
                        },
                        new
                        {
                            Id = new Guid("27af2180-3ff7-45fc-9743-4ed7bf5d6b98"),
                            Description = "Cuidade matutino",
                            KindergarterId = new Guid("eb510eaa-d99b-4dbf-980a-0af1411a3a8d")
                        },
                        new
                        {
                            Id = new Guid("ffd9e183-cf99-45d8-867e-3037b13bea8b"),
                            Description = "Cuidado Vespertino",
                            KindergarterId = new Guid("eb510eaa-d99b-4dbf-980a-0af1411a3a8d")
                        },
                        new
                        {
                            Id = new Guid("4ea02d29-0ea6-4b83-b875-cede1059ad09"),
                            Description = "Cuidado dia completo",
                            KindergarterId = new Guid("eb510eaa-d99b-4dbf-980a-0af1411a3a8d")
                        },
                        new
                        {
                            Id = new Guid("e99eba97-ff7a-4bcd-95f6-10bcf5256041"),
                            Description = "Clases de Ballet",
                            KindergarterId = new Guid("eb510eaa-d99b-4dbf-980a-0af1411a3a8d")
                        },
                        new
                        {
                            Id = new Guid("d915fe3a-b9a7-4b30-b3c4-e3c16c104c60"),
                            Description = "Clases de logica",
                            KindergarterId = new Guid("eb510eaa-d99b-4dbf-980a-0af1411a3a8d")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.EnrollActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityId");

                    b.Property<Guid>("EnrollmentId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EnrollmentId");

                    b.ToTable("EnrollActivity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("26ecac98-8285-4620-bd0b-bce16443c83b"),
                            ActivityId = new Guid("a106b783-137c-474f-802a-61000f55952e"),
                            EnrollmentId = new Guid("24673ef2-f1b7-47d6-84f4-e99538690ebb")
                        },
                        new
                        {
                            Id = new Guid("96871fdd-f0d4-44a2-9703-a1bb3f059abd"),
                            ActivityId = new Guid("7fc358e5-25b1-4b42-8ebd-6b8c1e98f675"),
                            EnrollmentId = new Guid("5012fced-b301-46ba-aeda-b2d70e8bc60d")
                        },
                        new
                        {
                            Id = new Guid("9c88680b-8ffe-4b84-ad06-d17f97f93a11"),
                            ActivityId = new Guid("66a4f647-dff5-4f81-b865-7a45427a68af"),
                            EnrollmentId = new Guid("0666e8fd-cb25-49c3-b0ef-5eb80897ca6b")
                        },
                        new
                        {
                            Id = new Guid("0f7c6b56-928f-4aa0-a7f6-12d4fe1e4fe1"),
                            ActivityId = new Guid("1326f828-d5ef-4117-aaa4-7b1f4b34ac7e"),
                            EnrollmentId = new Guid("7919813f-5c96-4e09-b576-957322ab4400")
                        },
                        new
                        {
                            Id = new Guid("13a3865b-b3e0-4673-a876-8f871b0d1b7c"),
                            ActivityId = new Guid("8bb1277f-8967-4a2b-ac36-1c8d52050b68"),
                            EnrollmentId = new Guid("2d87e04e-b81c-4410-96d5-4640e2408c9e")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime>("EnrollDay");

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId")
                        .IsUnique();

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("24673ef2-f1b7-47d6-84f4-e99538690ebb"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("017bd1bf-416d-4fc0-95c8-103b1fb7b7c2")
                        },
                        new
                        {
                            Id = new Guid("5012fced-b301-46ba-aeda-b2d70e8bc60d"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("02eae199-c9f9-4c3f-abde-54c654b4fad2")
                        },
                        new
                        {
                            Id = new Guid("0666e8fd-cb25-49c3-b0ef-5eb80897ca6b"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("043c5b84-774e-4435-8d64-a23403154215")
                        },
                        new
                        {
                            Id = new Guid("7919813f-5c96-4e09-b576-957322ab4400"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("048125a2-fe5f-4da2-8b03-1f38cf2147c6")
                        },
                        new
                        {
                            Id = new Guid("2d87e04e-b81c-4410-96d5-4640e2408c9e"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("07773e11-cf9b-4236-b6b0-8b6521eddbc1")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Feeding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Feeding");
                });

            modelBuilder.Entity("KindergartenAppService.Models.FeedingKid", b =>
                {
                    b.Property<Guid>("KidId");

                    b.Property<Guid>("FeddingId");

                    b.HasKey("KidId", "FeddingId");

                    b.HasIndex("FeddingId");

                    b.ToTable("FeedingKid");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("KindergartenAppService.Models.InvoiceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<Guid?>("InvoiceId");

                    b.Property<Guid>("ItemId");

                    b.Property<decimal>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ItemId");

                    b.ToTable("InvoiceDetail");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.Property<string>("Reference")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Item");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Item");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Diseases");

                    b.Property<string>("FatherName")
                        .IsRequired();

                    b.Property<string>("FavoriteActivities");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<Guid>("KindergarterId");

                    b.Property<string>("MotherName");

                    b.Property<Guid?>("PediatricianId");

                    b.Property<string>("SecondName");

                    b.Property<int>("Sex");

                    b.Property<int>("SiblingCount");

                    b.Property<int>("TShirtSize");

                    b.Property<Guid?>("TutorId");

                    b.Property<Guid?>("TutorPrincipalId");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.HasIndex("PediatricianId");

                    b.HasIndex("TutorId");

                    b.HasIndex("TutorPrincipalId");

                    b.ToTable("Kid");

                    b.HasData(
                        new
                        {
                            Id = new Guid("017bd1bf-416d-4fc0-95c8-103b1fb7b7c2"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Faringtom",
                            FirstName = "Johan",
                            KindergarterId = new Guid("eb510eaa-d99b-4dbf-980a-0af1411a3a8d"),
                            MotherName = "Snow",
                            SecondName = "Carlos",
                            Sex = 0,
                            SiblingCount = 0,
                            TShirtSize = 0,
                            TutorPrincipalId = new Guid("658fb13b-6f73-46bc-bcff-71da8a05805e")
                        },
                        new
                        {
                            Id = new Guid("02eae199-c9f9-4c3f-abde-54c654b4fad2"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Escobar",
                            FirstName = "Johan",
                            KindergarterId = new Guid("eb510eaa-d99b-4dbf-980a-0af1411a3a8d"),
                            MotherName = "Worm",
                            SecondName = "Eduardo",
                            Sex = 0,
                            SiblingCount = 0,
                            TShirtSize = 0,
                            TutorPrincipalId = new Guid("658fb13b-6f73-46bc-bcff-71da8a05805e")
                        },
                        new
                        {
                            Id = new Guid("043c5b84-774e-4435-8d64-a23403154215"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Lee",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("eb510eaa-d99b-4dbf-980a-0af1411a3a8d"),
                            MotherName = "Worm",
                            SecondName = "Eduardo",
                            Sex = 0,
                            SiblingCount = 0,
                            TShirtSize = 0,
                            TutorPrincipalId = new Guid("658fb13b-6f73-46bc-bcff-71da8a05805e")
                        },
                        new
                        {
                            Id = new Guid("048125a2-fe5f-4da2-8b03-1f38cf2147c6"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Lee",
                            FirstName = "Lyan",
                            KindergarterId = new Guid("eb510eaa-d99b-4dbf-980a-0af1411a3a8d"),
                            MotherName = "Snow",
                            SecondName = "Carlos",
                            Sex = 0,
                            SiblingCount = 0,
                            TShirtSize = 0,
                            TutorPrincipalId = new Guid("658fb13b-6f73-46bc-bcff-71da8a05805e")
                        },
                        new
                        {
                            Id = new Guid("07773e11-cf9b-4236-b6b0-8b6521eddbc1"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Lee",
                            FirstName = "Johan",
                            KindergarterId = new Guid("eb510eaa-d99b-4dbf-980a-0af1411a3a8d"),
                            MotherName = "Washinton",
                            SecondName = "Carlos",
                            Sex = 0,
                            SiblingCount = 0,
                            TShirtSize = 0,
                            TutorPrincipalId = new Guid("658fb13b-6f73-46bc-bcff-71da8a05805e")
                        },
                        new
                        {
                            Id = new Guid("09578ab0-2e44-41f5-944d-c425b92e96b5"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Escobar",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("eb510eaa-d99b-4dbf-980a-0af1411a3a8d"),
                            MotherName = "White",
                            SecondName = "Carlos",
                            Sex = 0,
                            SiblingCount = 0,
                            TShirtSize = 0,
                            TutorPrincipalId = new Guid("658fb13b-6f73-46bc-bcff-71da8a05805e")
                        },
                        new
                        {
                            Id = new Guid("0a4802bb-e02d-49bc-9e4e-5e0de0152635"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Stackeetam",
                            FirstName = "Lyan",
                            KindergarterId = new Guid("eb510eaa-d99b-4dbf-980a-0af1411a3a8d"),
                            MotherName = "White",
                            SecondName = "Carlos",
                            Sex = 0,
                            SiblingCount = 0,
                            TShirtSize = 0,
                            TutorPrincipalId = new Guid("658fb13b-6f73-46bc-bcff-71da8a05805e")
                        },
                        new
                        {
                            Id = new Guid("0ab5dffb-80e6-4209-8112-deb27c032810"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Escobar",
                            FirstName = "Aaron",
                            KindergarterId = new Guid("eb510eaa-d99b-4dbf-980a-0af1411a3a8d"),
                            MotherName = "Snow",
                            SecondName = "Carlos",
                            Sex = 0,
                            SiblingCount = 0,
                            TShirtSize = 0,
                            TutorPrincipalId = new Guid("658fb13b-6f73-46bc-bcff-71da8a05805e")
                        },
                        new
                        {
                            Id = new Guid("0c652477-7662-4204-90ac-a06228197e63"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Stackeetam",
                            FirstName = "Johan",
                            KindergarterId = new Guid("eb510eaa-d99b-4dbf-980a-0af1411a3a8d"),
                            MotherName = "Worm",
                            SecondName = "Carlos",
                            Sex = 0,
                            SiblingCount = 0,
                            TShirtSize = 0,
                            TutorPrincipalId = new Guid("658fb13b-6f73-46bc-bcff-71da8a05805e")
                        },
                        new
                        {
                            Id = new Guid("0c996e27-5252-4512-ab5e-ba6047dc9e71"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Escobar",
                            FirstName = "Aaron",
                            KindergarterId = new Guid("eb510eaa-d99b-4dbf-980a-0af1411a3a8d"),
                            MotherName = "White",
                            SecondName = "Eduardo",
                            Sex = 0,
                            SiblingCount = 0,
                            TShirtSize = 0,
                            TutorPrincipalId = new Guid("658fb13b-6f73-46bc-bcff-71da8a05805e")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kindergarter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Kindergarters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb510eaa-d99b-4dbf-980a-0af1411a3a8d"),
                            Description = "KPH"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("MedicalRecord");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Payment", b =>
                {
                    b.Property<Guid>("InvoiceId");

                    b.Property<Guid>("ReceiptId");

                    b.HasKey("InvoiceId", "ReceiptId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Pediatrician", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Pediatrician");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Precense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KidId");

                    b.Property<DateTime>("PrecenseDay");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("Precense");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Receipt");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Stock", b =>
                {
                    b.Property<Guid>("StoreId");

                    b.Property<Guid>("ProductId");

                    b.HasKey("StoreId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.HasKey("Id");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("KindergartenAppService.Models.SubActivities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityId");

                    b.Property<DateTime>("Date");

                    b.Property<TimeSpan>("EndingTime");

                    b.Property<TimeSpan>("StaringTime");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("SubActivities");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Tutor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Mail");

                    b.Property<string>("MovilNumber");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Tutors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("658fb13b-6f73-46bc-bcff-71da8a05805e"),
                            FirstName = "Gregorio de Jesus",
                            LastName = "Rojas Acosta"
                        },
                        new
                        {
                            Id = new Guid("2d6040a3-b05c-440e-b3a6-be02fa9cd575"),
                            FirstName = "Yadira",
                            LastName = "Pinales Delgado"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KindergarterId");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Product", b =>
                {
                    b.HasBaseType("KindergartenAppService.Models.Item");

                    b.HasDiscriminator().HasValue("Product");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Service", b =>
                {
                    b.HasBaseType("KindergartenAppService.Models.Item");

                    b.Property<Guid>("ActivityId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("ServicePeriod");

                    b.HasIndex("ActivityId");

                    b.HasDiscriminator().HasValue("Service");

                    b.HasData(
                        new
                        {
                            Id = new Guid("959041e4-ee86-4577-8f9a-d9186904ec17"),
                            Price = 7591m,
                            Reference = "SRV-39",
                            ActivityId = new Guid("8bb1277f-8967-4a2b-ac36-1c8d52050b68"),
                            Description = "Service Clases de ingles",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("23d70a44-77c8-426c-a91d-7b1970912142"),
                            Price = 8977m,
                            Reference = "SRV-2",
                            ActivityId = new Guid("3312b7e3-c04a-4be2-8f9b-3cf4f574f288"),
                            Description = "Service Cuidade matutino",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("c09e0427-8e66-4445-a7f0-2e644aa71eec"),
                            Price = 4196m,
                            Reference = "SRV-280",
                            ActivityId = new Guid("a106b783-137c-474f-802a-61000f55952e"),
                            Description = "Service Cuidado Vespertino",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("692e5f12-abfd-4df0-9c8e-168457692e4c"),
                            Price = 4936m,
                            Reference = "SRV-720",
                            ActivityId = new Guid("7fc358e5-25b1-4b42-8ebd-6b8c1e98f675"),
                            Description = "Service Cuidado dia completo",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("0ed2e4fd-f755-46d2-aebb-3f3216c5b3b5"),
                            Price = 897m,
                            Reference = "SRV-887",
                            ActivityId = new Guid("66a4f647-dff5-4f81-b865-7a45427a68af"),
                            Description = "Service Clases de Ballet",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("44236066-9f88-4879-bffd-6a84cd8adc77"),
                            Price = 7020m,
                            Reference = "SRV-55",
                            ActivityId = new Guid("1326f828-d5ef-4117-aaa4-7b1f4b34ac7e"),
                            Description = "Service Clases de logica",
                            ServicePeriod = 77
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Activity", b =>
                {
                    b.HasOne("KindergartenAppService.Models.ActivityTemplate", "ActivityTemplate")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.ActivityTemplate", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("ActivityTemplates")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.EnrollActivity", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Enrollment", "Enrollment")
                        .WithMany("EnrollActivities")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Enrollment", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithOne("Enrollment")
                        .HasForeignKey("KindergartenAppService.Models.Enrollment", "KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.FeedingKid", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Feeding", "Fedding")
                        .WithMany("FeedingKids")
                        .HasForeignKey("FeddingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("FeedingKids")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Invoice", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany()
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.InvoiceDetail", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("KindergartenAppService.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kid", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("Kids")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Pediatrician", "Pediatrician")
                        .WithMany("Kids")
                        .HasForeignKey("PediatricianId");

                    b.HasOne("KindergartenAppService.Models.Tutor")
                        .WithMany("Kids")
                        .HasForeignKey("TutorId");

                    b.HasOne("KindergartenAppService.Models.Tutor", "TutorPrincipal")
                        .WithMany()
                        .HasForeignKey("TutorPrincipalId");
                });

            modelBuilder.Entity("KindergartenAppService.Models.MedicalRecord", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Payment", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Receipt", "Receipt")
                        .WithMany("Payments")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Precense", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("Precenses")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Stock", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Product", "Product")
                        .WithMany("Stock")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Store", "Store")
                        .WithMany("Stock")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.SubActivities", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany("SubActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.User", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("Users")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Service", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
