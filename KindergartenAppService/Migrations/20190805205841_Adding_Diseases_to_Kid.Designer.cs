// <auto-generated />
using System;
using KindergartenAppService.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KindergartenAppService.Migrations
{
    [DbContext(typeof(KindergarterContext))]
    [Migration("20190805205841_Adding_Diseases_to_Kid")]
    partial class Adding_Diseases_to_Kid
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KindergartenAppService.Models.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityTemplateId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ActivityTemplateId");

                    b.ToTable("Activity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e559dbfe-5134-4f22-8401-4af72823c7b2"),
                            ActivityTemplateId = new Guid("07ada114-9c9f-44f0-902e-8ae5c30c3ec0"),
                            Description = "Clases de ingles"
                        },
                        new
                        {
                            Id = new Guid("d286f309-3ec8-4fc8-b2ab-961eca9e5741"),
                            ActivityTemplateId = new Guid("d574a125-c9ef-4abd-86b7-08c762f42144"),
                            Description = "Cuidade matutino"
                        },
                        new
                        {
                            Id = new Guid("060e81b8-2604-42db-b7ab-9665d34efb0e"),
                            ActivityTemplateId = new Guid("f015fb28-1594-434b-9ec5-341b45229af2"),
                            Description = "Cuidado Vespertino"
                        },
                        new
                        {
                            Id = new Guid("59f590c1-0bbb-494b-a463-48d73cbf5339"),
                            ActivityTemplateId = new Guid("0e6b8d42-1793-4ff3-b4fb-54ff8fb0b303"),
                            Description = "Cuidado dia completo"
                        },
                        new
                        {
                            Id = new Guid("8366304a-a7a1-4472-afc3-aec8a908e810"),
                            ActivityTemplateId = new Guid("76eec8c5-3efd-48ea-be18-a5b584dc1acc"),
                            Description = "Clases de Ballet"
                        },
                        new
                        {
                            Id = new Guid("859cd2ff-057f-483a-9338-519a31dfbd99"),
                            ActivityTemplateId = new Guid("1369cafd-86e3-426d-8316-662c650590bc"),
                            Description = "Clases de logica"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.ActivityTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<Guid>("KindergarterId");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.ToTable("ActivityTemplate");

                    b.HasData(
                        new
                        {
                            Id = new Guid("07ada114-9c9f-44f0-902e-8ae5c30c3ec0"),
                            Description = "Clases de ingles",
                            KindergarterId = new Guid("61fbf9e3-5109-4046-88c7-7ad0dc9d5bfd")
                        },
                        new
                        {
                            Id = new Guid("d574a125-c9ef-4abd-86b7-08c762f42144"),
                            Description = "Cuidade matutino",
                            KindergarterId = new Guid("61fbf9e3-5109-4046-88c7-7ad0dc9d5bfd")
                        },
                        new
                        {
                            Id = new Guid("f015fb28-1594-434b-9ec5-341b45229af2"),
                            Description = "Cuidado Vespertino",
                            KindergarterId = new Guid("61fbf9e3-5109-4046-88c7-7ad0dc9d5bfd")
                        },
                        new
                        {
                            Id = new Guid("0e6b8d42-1793-4ff3-b4fb-54ff8fb0b303"),
                            Description = "Cuidado dia completo",
                            KindergarterId = new Guid("61fbf9e3-5109-4046-88c7-7ad0dc9d5bfd")
                        },
                        new
                        {
                            Id = new Guid("76eec8c5-3efd-48ea-be18-a5b584dc1acc"),
                            Description = "Clases de Ballet",
                            KindergarterId = new Guid("61fbf9e3-5109-4046-88c7-7ad0dc9d5bfd")
                        },
                        new
                        {
                            Id = new Guid("1369cafd-86e3-426d-8316-662c650590bc"),
                            Description = "Clases de logica",
                            KindergarterId = new Guid("61fbf9e3-5109-4046-88c7-7ad0dc9d5bfd")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.EnrollActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityId");

                    b.Property<Guid>("EnrollmentId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EnrollmentId");

                    b.ToTable("EnrollActivity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b09c42e3-f817-40b0-a185-55b9913b0e3a"),
                            ActivityId = new Guid("59f590c1-0bbb-494b-a463-48d73cbf5339"),
                            EnrollmentId = new Guid("ea8adc79-8547-461c-897b-cdfbdab03db9")
                        },
                        new
                        {
                            Id = new Guid("fe84c153-5a07-4003-bade-3ec1c4a7a4bc"),
                            ActivityId = new Guid("859cd2ff-057f-483a-9338-519a31dfbd99"),
                            EnrollmentId = new Guid("9c7e6a6e-aba7-4af0-8c5b-f63e2fda6863")
                        },
                        new
                        {
                            Id = new Guid("9d33235e-ebf8-49c2-b974-7a52f8c33e3b"),
                            ActivityId = new Guid("859cd2ff-057f-483a-9338-519a31dfbd99"),
                            EnrollmentId = new Guid("b0763444-cbb2-4c7c-b81a-bfe12cd485dd")
                        },
                        new
                        {
                            Id = new Guid("906b5da6-7925-4696-aadb-417657f1d079"),
                            ActivityId = new Guid("d286f309-3ec8-4fc8-b2ab-961eca9e5741"),
                            EnrollmentId = new Guid("c720c158-321f-40a0-882a-27b71f940298")
                        },
                        new
                        {
                            Id = new Guid("a1906eba-6377-4fa8-891a-28d8224194b4"),
                            ActivityId = new Guid("8366304a-a7a1-4472-afc3-aec8a908e810"),
                            EnrollmentId = new Guid("2f085670-1cff-423f-bff1-5cafe11b0b41")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime>("EnrollDay");

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId")
                        .IsUnique();

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea8adc79-8547-461c-897b-cdfbdab03db9"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("01609e67-66a1-4f44-a704-2d1ebe07a985")
                        },
                        new
                        {
                            Id = new Guid("9c7e6a6e-aba7-4af0-8c5b-f63e2fda6863"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("0219bcd6-ca2e-45d8-962e-9fdbd9a6c965")
                        },
                        new
                        {
                            Id = new Guid("b0763444-cbb2-4c7c-b81a-bfe12cd485dd"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("04c2d0cd-e3df-4fde-8a1a-57eb0c94eb4c")
                        },
                        new
                        {
                            Id = new Guid("c720c158-321f-40a0-882a-27b71f940298"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("0586b92f-d400-4924-bec8-a1651aa19362")
                        },
                        new
                        {
                            Id = new Guid("2f085670-1cff-423f-bff1-5cafe11b0b41"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("063389db-bb81-426c-9836-60804278f620")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Feeding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Feeding");
                });

            modelBuilder.Entity("KindergartenAppService.Models.FeedingKid", b =>
                {
                    b.Property<Guid>("KidId");

                    b.Property<Guid>("FeddingId");

                    b.HasKey("KidId", "FeddingId");

                    b.HasIndex("FeddingId");

                    b.ToTable("FeedingKid");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("KindergartenAppService.Models.InvoiceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<Guid?>("InvoiceId");

                    b.Property<Guid>("ItemId");

                    b.Property<decimal>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ItemId");

                    b.ToTable("InvoiceDetail");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.Property<string>("Reference")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Item");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Item");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Diseases");

                    b.Property<string>("FatherName")
                        .IsRequired();

                    b.Property<string>("FavoriteActivities");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<Guid>("KindergarterId");

                    b.Property<string>("MotherName");

                    b.Property<string>("SecondName");

                    b.Property<int>("SiblingCount");

                    b.Property<Guid>("TutorId");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.HasIndex("TutorId");

                    b.ToTable("Kid");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01609e67-66a1-4f44-a704-2d1ebe07a985"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Faringtom",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("61fbf9e3-5109-4046-88c7-7ad0dc9d5bfd"),
                            MotherName = "White",
                            SecondName = "Eduardo",
                            SiblingCount = 0,
                            TutorId = new Guid("a39d64d3-1213-4afe-b819-9c6ad903e4fa")
                        },
                        new
                        {
                            Id = new Guid("0219bcd6-ca2e-45d8-962e-9fdbd9a6c965"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Lee",
                            FirstName = "Johan",
                            KindergarterId = new Guid("61fbf9e3-5109-4046-88c7-7ad0dc9d5bfd"),
                            MotherName = "Washinton",
                            SecondName = "Enrique",
                            SiblingCount = 0,
                            TutorId = new Guid("a39d64d3-1213-4afe-b819-9c6ad903e4fa")
                        },
                        new
                        {
                            Id = new Guid("04c2d0cd-e3df-4fde-8a1a-57eb0c94eb4c"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Faringtom",
                            FirstName = "Aaron",
                            KindergarterId = new Guid("61fbf9e3-5109-4046-88c7-7ad0dc9d5bfd"),
                            MotherName = "Washinton",
                            SecondName = "Eduardo",
                            SiblingCount = 0,
                            TutorId = new Guid("a39d64d3-1213-4afe-b819-9c6ad903e4fa")
                        },
                        new
                        {
                            Id = new Guid("0586b92f-d400-4924-bec8-a1651aa19362"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Stackeetam",
                            FirstName = "Aaron",
                            KindergarterId = new Guid("61fbf9e3-5109-4046-88c7-7ad0dc9d5bfd"),
                            MotherName = "Worm",
                            SecondName = "Eduardo",
                            SiblingCount = 0,
                            TutorId = new Guid("a39d64d3-1213-4afe-b819-9c6ad903e4fa")
                        },
                        new
                        {
                            Id = new Guid("063389db-bb81-426c-9836-60804278f620"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Escobar",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("61fbf9e3-5109-4046-88c7-7ad0dc9d5bfd"),
                            MotherName = "White",
                            SecondName = "Enrique",
                            SiblingCount = 0,
                            TutorId = new Guid("a39d64d3-1213-4afe-b819-9c6ad903e4fa")
                        },
                        new
                        {
                            Id = new Guid("06d136a0-b3d9-430d-a44d-0e4f3b6a343c"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Escobar",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("61fbf9e3-5109-4046-88c7-7ad0dc9d5bfd"),
                            MotherName = "Worm",
                            SecondName = "Carlos",
                            SiblingCount = 0,
                            TutorId = new Guid("a39d64d3-1213-4afe-b819-9c6ad903e4fa")
                        },
                        new
                        {
                            Id = new Guid("08582111-c005-44f8-983a-51ffe0ed7da8"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Faringtom",
                            FirstName = "Johan",
                            KindergarterId = new Guid("61fbf9e3-5109-4046-88c7-7ad0dc9d5bfd"),
                            MotherName = "White",
                            SecondName = "Enrique",
                            SiblingCount = 0,
                            TutorId = new Guid("a39d64d3-1213-4afe-b819-9c6ad903e4fa")
                        },
                        new
                        {
                            Id = new Guid("0872a88b-4c84-4293-8b1f-5e1a5025f127"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Stackeetam",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("61fbf9e3-5109-4046-88c7-7ad0dc9d5bfd"),
                            MotherName = "Washinton",
                            SecondName = "Eduardo",
                            SiblingCount = 0,
                            TutorId = new Guid("a39d64d3-1213-4afe-b819-9c6ad903e4fa")
                        },
                        new
                        {
                            Id = new Guid("08760263-b501-407d-93a9-0f43e511fae0"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Faringtom",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("61fbf9e3-5109-4046-88c7-7ad0dc9d5bfd"),
                            MotherName = "White",
                            SecondName = "Enrique",
                            SiblingCount = 0,
                            TutorId = new Guid("a39d64d3-1213-4afe-b819-9c6ad903e4fa")
                        },
                        new
                        {
                            Id = new Guid("0a15c9d8-eab6-40ca-bbcc-5d68904b4cf0"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Lee",
                            FirstName = "Aaron",
                            KindergarterId = new Guid("61fbf9e3-5109-4046-88c7-7ad0dc9d5bfd"),
                            MotherName = "White",
                            SecondName = "Emilio",
                            SiblingCount = 0,
                            TutorId = new Guid("a39d64d3-1213-4afe-b819-9c6ad903e4fa")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kindergarter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Kindergarters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("61fbf9e3-5109-4046-88c7-7ad0dc9d5bfd"),
                            Description = "KPH"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("MedicalRecord");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Payment", b =>
                {
                    b.Property<Guid>("InvoiceId");

                    b.Property<Guid>("ReceiptId");

                    b.HasKey("InvoiceId", "ReceiptId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Precense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KidId");

                    b.Property<DateTime>("PrecenseDay");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("Precense");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Receipt");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Stock", b =>
                {
                    b.Property<Guid>("StoreId");

                    b.Property<Guid>("ProductId");

                    b.HasKey("StoreId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.HasKey("Id");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("KindergartenAppService.Models.SubActivities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityId");

                    b.Property<DateTime>("Date");

                    b.Property<TimeSpan>("EndingTime");

                    b.Property<TimeSpan>("StaringTime");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("SubActivities");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Tutor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Mail");

                    b.Property<string>("MovilNumber");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Tutors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a39d64d3-1213-4afe-b819-9c6ad903e4fa"),
                            FirstName = "Gregorio de Jesus",
                            LastName = "Rojas Acosta"
                        },
                        new
                        {
                            Id = new Guid("7b7a55eb-0888-43cf-b0c6-6c448124dc2c"),
                            FirstName = "Yadira",
                            LastName = "Pinales Delgado"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KindergarterId");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Product", b =>
                {
                    b.HasBaseType("KindergartenAppService.Models.Item");

                    b.HasDiscriminator().HasValue("Product");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Service", b =>
                {
                    b.HasBaseType("KindergartenAppService.Models.Item");

                    b.Property<Guid>("ActivityId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("ServicePeriod");

                    b.HasIndex("ActivityId");

                    b.HasDiscriminator().HasValue("Service");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be14cad9-6580-497d-ba84-29bb40093eb9"),
                            Price = 5063m,
                            Reference = "SRV-754",
                            ActivityId = new Guid("e559dbfe-5134-4f22-8401-4af72823c7b2"),
                            Description = "Service Clases de ingles",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("4e2b81b4-8af2-4353-b47d-daf190493290"),
                            Price = 2563m,
                            Reference = "SRV-36",
                            ActivityId = new Guid("d286f309-3ec8-4fc8-b2ab-961eca9e5741"),
                            Description = "Service Cuidade matutino",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("5ca5fa7b-0be4-45fe-8dbf-5aebf4c2108e"),
                            Price = 1498m,
                            Reference = "SRV-567",
                            ActivityId = new Guid("060e81b8-2604-42db-b7ab-9665d34efb0e"),
                            Description = "Service Cuidado Vespertino",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("e8e2c83e-35cf-4bc5-b12b-8bf93b920b91"),
                            Price = 1804m,
                            Reference = "SRV-459",
                            ActivityId = new Guid("59f590c1-0bbb-494b-a463-48d73cbf5339"),
                            Description = "Service Cuidado dia completo",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("5bd4e44f-4ffe-4143-b6df-026844dec690"),
                            Price = 1716m,
                            Reference = "SRV-620",
                            ActivityId = new Guid("8366304a-a7a1-4472-afc3-aec8a908e810"),
                            Description = "Service Clases de Ballet",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("a55776f8-04f1-4712-bbc1-19987d433dea"),
                            Price = 3986m,
                            Reference = "SRV-78",
                            ActivityId = new Guid("859cd2ff-057f-483a-9338-519a31dfbd99"),
                            Description = "Service Clases de logica",
                            ServicePeriod = 77
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Activity", b =>
                {
                    b.HasOne("KindergartenAppService.Models.ActivityTemplate", "ActivityTemplate")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.ActivityTemplate", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("ActivityTemplates")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.EnrollActivity", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Enrollment", "Enrollment")
                        .WithMany("EnrollActivities")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Enrollment", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithOne("Enrollment")
                        .HasForeignKey("KindergartenAppService.Models.Enrollment", "KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.FeedingKid", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Feeding", "Fedding")
                        .WithMany("FeedingKids")
                        .HasForeignKey("FeddingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("FeedingKids")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Invoice", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany()
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.InvoiceDetail", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("KindergartenAppService.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kid", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("Kids")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Tutor", "Tutor")
                        .WithMany("Kids")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.MedicalRecord", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Payment", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Receipt", "Receipt")
                        .WithMany("Payments")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Precense", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("Precenses")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Stock", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Product", "Product")
                        .WithMany("Stock")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Store", "Store")
                        .WithMany("Stock")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.SubActivities", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany("SubActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.User", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("Users")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Service", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
