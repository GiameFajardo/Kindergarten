// <auto-generated />
using System;
using KindergartenAppService.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KindergartenAppService.Migrations
{
    [DbContext(typeof(KindergarterContext))]
    [Migration("20190805200112_Adding_BirthDate_to_Kid")]
    partial class Adding_BirthDate_to_Kid
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KindergartenAppService.Models.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityTemplateId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ActivityTemplateId");

                    b.ToTable("Activity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b88105b-c876-4a28-87d7-1f3d0322a0a1"),
                            ActivityTemplateId = new Guid("6445b41e-703d-43e0-bd61-9b5da9c000d4"),
                            Description = "Clases de ingles"
                        },
                        new
                        {
                            Id = new Guid("0cd9815a-7009-4030-8dbb-0154b54f688f"),
                            ActivityTemplateId = new Guid("34f79d9f-cb86-4630-a902-5112255cb14b"),
                            Description = "Cuidade matutino"
                        },
                        new
                        {
                            Id = new Guid("d5188193-9818-4456-a285-79d5c999fa2d"),
                            ActivityTemplateId = new Guid("2f7da22f-d8ff-434e-a809-9be2bfa4e336"),
                            Description = "Cuidado Vespertino"
                        },
                        new
                        {
                            Id = new Guid("d42deb14-3394-4985-89ff-331183a5695b"),
                            ActivityTemplateId = new Guid("965fa3ce-d2ba-4bf2-a86a-017e68fc1f88"),
                            Description = "Cuidado dia completo"
                        },
                        new
                        {
                            Id = new Guid("4cdc7f6b-21e3-4d66-828c-85cb5dc95dc6"),
                            ActivityTemplateId = new Guid("a7a84b8d-8994-486d-af9f-108e3a143371"),
                            Description = "Clases de Ballet"
                        },
                        new
                        {
                            Id = new Guid("aae44eba-e3d8-40ec-958c-00cf40889477"),
                            ActivityTemplateId = new Guid("d4e06d32-38be-448c-8d2f-f6fb53c435fb"),
                            Description = "Clases de logica"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.ActivityTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<Guid>("KindergarterId");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.ToTable("ActivityTemplate");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6445b41e-703d-43e0-bd61-9b5da9c000d4"),
                            Description = "Clases de ingles",
                            KindergarterId = new Guid("4768f955-3a2a-4c94-aa9a-85c0f2ec2705")
                        },
                        new
                        {
                            Id = new Guid("34f79d9f-cb86-4630-a902-5112255cb14b"),
                            Description = "Cuidade matutino",
                            KindergarterId = new Guid("4768f955-3a2a-4c94-aa9a-85c0f2ec2705")
                        },
                        new
                        {
                            Id = new Guid("2f7da22f-d8ff-434e-a809-9be2bfa4e336"),
                            Description = "Cuidado Vespertino",
                            KindergarterId = new Guid("4768f955-3a2a-4c94-aa9a-85c0f2ec2705")
                        },
                        new
                        {
                            Id = new Guid("965fa3ce-d2ba-4bf2-a86a-017e68fc1f88"),
                            Description = "Cuidado dia completo",
                            KindergarterId = new Guid("4768f955-3a2a-4c94-aa9a-85c0f2ec2705")
                        },
                        new
                        {
                            Id = new Guid("a7a84b8d-8994-486d-af9f-108e3a143371"),
                            Description = "Clases de Ballet",
                            KindergarterId = new Guid("4768f955-3a2a-4c94-aa9a-85c0f2ec2705")
                        },
                        new
                        {
                            Id = new Guid("d4e06d32-38be-448c-8d2f-f6fb53c435fb"),
                            Description = "Clases de logica",
                            KindergarterId = new Guid("4768f955-3a2a-4c94-aa9a-85c0f2ec2705")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.EnrollActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityId");

                    b.Property<Guid>("EnrollmentId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EnrollmentId");

                    b.ToTable("EnrollActivity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("176b4594-3fa2-4291-a621-600edecc7d36"),
                            ActivityId = new Guid("d5188193-9818-4456-a285-79d5c999fa2d"),
                            EnrollmentId = new Guid("b96c00a4-a7b7-4d87-b9e1-b3cc3914f7e6")
                        },
                        new
                        {
                            Id = new Guid("f7387356-ba8d-449e-b735-06c33b7b289d"),
                            ActivityId = new Guid("aae44eba-e3d8-40ec-958c-00cf40889477"),
                            EnrollmentId = new Guid("9bc99801-c966-4050-bf1a-4be92d535027")
                        },
                        new
                        {
                            Id = new Guid("1b5e670b-ce8d-4517-9361-9ee0e8c2dab0"),
                            ActivityId = new Guid("d42deb14-3394-4985-89ff-331183a5695b"),
                            EnrollmentId = new Guid("b0e86651-5a50-426f-a499-6f9b44f8a682")
                        },
                        new
                        {
                            Id = new Guid("07fdbcb0-14e4-4e57-97bc-84c1c7f2cf4b"),
                            ActivityId = new Guid("4cdc7f6b-21e3-4d66-828c-85cb5dc95dc6"),
                            EnrollmentId = new Guid("4c369bda-8931-420a-b048-583bc5dcff76")
                        },
                        new
                        {
                            Id = new Guid("940a15f8-6248-4e5c-ae02-b86f7add694b"),
                            ActivityId = new Guid("8b88105b-c876-4a28-87d7-1f3d0322a0a1"),
                            EnrollmentId = new Guid("ca921d2d-6c3d-4e4f-b7f8-c3c65f6cd7a1")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime>("EnrollDay");

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId")
                        .IsUnique();

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b96c00a4-a7b7-4d87-b9e1-b3cc3914f7e6"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("006708aa-007c-4658-9a05-6446f66fe54f")
                        },
                        new
                        {
                            Id = new Guid("9bc99801-c966-4050-bf1a-4be92d535027"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("013d0f8c-964b-4a96-9c16-fa0645bf3e65")
                        },
                        new
                        {
                            Id = new Guid("b0e86651-5a50-426f-a499-6f9b44f8a682"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("0156dcd6-557d-4b9b-8339-bf90522f8265")
                        },
                        new
                        {
                            Id = new Guid("4c369bda-8931-420a-b048-583bc5dcff76"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("0169e738-7e2d-4e3d-92fc-88ddf334f4ec")
                        },
                        new
                        {
                            Id = new Guid("ca921d2d-6c3d-4e4f-b7f8-c3c65f6cd7a1"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("0181bebe-94c4-4556-9cf0-7efc9f41156c")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Feeding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Feeding");
                });

            modelBuilder.Entity("KindergartenAppService.Models.FeedingKid", b =>
                {
                    b.Property<Guid>("KidId");

                    b.Property<Guid>("FeddingId");

                    b.HasKey("KidId", "FeddingId");

                    b.HasIndex("FeddingId");

                    b.ToTable("FeedingKid");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("KindergartenAppService.Models.InvoiceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<Guid?>("InvoiceId");

                    b.Property<Guid>("ItemId");

                    b.Property<decimal>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ItemId");

                    b.ToTable("InvoiceDetail");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.Property<string>("Reference")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Item");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Item");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDate");

                    b.Property<DateTime>("BirthDateTwo");

                    b.Property<string>("FatherName")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<Guid>("KindergarterId");

                    b.Property<string>("MotherName");

                    b.Property<string>("SecondName");

                    b.Property<Guid>("TutorId");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.HasIndex("TutorId");

                    b.ToTable("Kid");

                    b.HasData(
                        new
                        {
                            Id = new Guid("006708aa-007c-4658-9a05-6446f66fe54f"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthDateTwo = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Stackeetam",
                            FirstName = "Johan",
                            KindergarterId = new Guid("4768f955-3a2a-4c94-aa9a-85c0f2ec2705"),
                            MotherName = "Washinton",
                            SecondName = "Carlos",
                            TutorId = new Guid("bb5d8000-bc2a-47dd-9279-b20e63258b0b")
                        },
                        new
                        {
                            Id = new Guid("013d0f8c-964b-4a96-9c16-fa0645bf3e65"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthDateTwo = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Escobar",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("4768f955-3a2a-4c94-aa9a-85c0f2ec2705"),
                            MotherName = "Worm",
                            SecondName = "Enrique",
                            TutorId = new Guid("bb5d8000-bc2a-47dd-9279-b20e63258b0b")
                        },
                        new
                        {
                            Id = new Guid("0156dcd6-557d-4b9b-8339-bf90522f8265"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthDateTwo = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Stackeetam",
                            FirstName = "Lyan",
                            KindergarterId = new Guid("4768f955-3a2a-4c94-aa9a-85c0f2ec2705"),
                            MotherName = "White",
                            SecondName = "Eduardo",
                            TutorId = new Guid("bb5d8000-bc2a-47dd-9279-b20e63258b0b")
                        },
                        new
                        {
                            Id = new Guid("0169e738-7e2d-4e3d-92fc-88ddf334f4ec"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthDateTwo = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Escobar",
                            FirstName = "Lyan",
                            KindergarterId = new Guid("4768f955-3a2a-4c94-aa9a-85c0f2ec2705"),
                            MotherName = "White",
                            SecondName = "Carlos",
                            TutorId = new Guid("bb5d8000-bc2a-47dd-9279-b20e63258b0b")
                        },
                        new
                        {
                            Id = new Guid("0181bebe-94c4-4556-9cf0-7efc9f41156c"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthDateTwo = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Stackeetam",
                            FirstName = "Lyan",
                            KindergarterId = new Guid("4768f955-3a2a-4c94-aa9a-85c0f2ec2705"),
                            MotherName = "White",
                            SecondName = "Emilio",
                            TutorId = new Guid("bb5d8000-bc2a-47dd-9279-b20e63258b0b")
                        },
                        new
                        {
                            Id = new Guid("0253b70d-39e8-47aa-9384-cb8fda12a06c"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthDateTwo = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Stackeetam",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("4768f955-3a2a-4c94-aa9a-85c0f2ec2705"),
                            MotherName = "Worm",
                            SecondName = "Eduardo",
                            TutorId = new Guid("bb5d8000-bc2a-47dd-9279-b20e63258b0b")
                        },
                        new
                        {
                            Id = new Guid("03ac5cfc-6f05-47a7-bfac-0d4452dba54c"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthDateTwo = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Faringtom",
                            FirstName = "Johan",
                            KindergarterId = new Guid("4768f955-3a2a-4c94-aa9a-85c0f2ec2705"),
                            MotherName = "Snow",
                            SecondName = "Carlos",
                            TutorId = new Guid("bb5d8000-bc2a-47dd-9279-b20e63258b0b")
                        },
                        new
                        {
                            Id = new Guid("046378b5-79fc-4138-9239-1cb43c81feaf"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthDateTwo = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Stackeetam",
                            FirstName = "Lyan",
                            KindergarterId = new Guid("4768f955-3a2a-4c94-aa9a-85c0f2ec2705"),
                            MotherName = "Worm",
                            SecondName = "Enrique",
                            TutorId = new Guid("bb5d8000-bc2a-47dd-9279-b20e63258b0b")
                        },
                        new
                        {
                            Id = new Guid("046b8794-01ab-4b3a-b9bc-66ac3cf683e8"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthDateTwo = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Faringtom",
                            FirstName = "Lyan",
                            KindergarterId = new Guid("4768f955-3a2a-4c94-aa9a-85c0f2ec2705"),
                            MotherName = "White",
                            SecondName = "Emilio",
                            TutorId = new Guid("bb5d8000-bc2a-47dd-9279-b20e63258b0b")
                        },
                        new
                        {
                            Id = new Guid("05952a27-549f-4132-bb82-05e245021607"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthDateTwo = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Lee",
                            FirstName = "Aaron",
                            KindergarterId = new Guid("4768f955-3a2a-4c94-aa9a-85c0f2ec2705"),
                            MotherName = "Snow",
                            SecondName = "Eduardo",
                            TutorId = new Guid("bb5d8000-bc2a-47dd-9279-b20e63258b0b")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kindergarter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Kindergarters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4768f955-3a2a-4c94-aa9a-85c0f2ec2705"),
                            Description = "KPH"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("MedicalRecord");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Payment", b =>
                {
                    b.Property<Guid>("InvoiceId");

                    b.Property<Guid>("ReceiptId");

                    b.HasKey("InvoiceId", "ReceiptId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Precense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KidId");

                    b.Property<DateTime>("PrecenseDay");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("Precense");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Receipt");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Stock", b =>
                {
                    b.Property<Guid>("StoreId");

                    b.Property<Guid>("ProductId");

                    b.HasKey("StoreId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.HasKey("Id");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("KindergartenAppService.Models.SubActivities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityId");

                    b.Property<DateTime>("Date");

                    b.Property<TimeSpan>("EndingTime");

                    b.Property<TimeSpan>("StaringTime");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("SubActivities");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Tutor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Mail");

                    b.Property<string>("MovilNumber");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Tutors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb5d8000-bc2a-47dd-9279-b20e63258b0b"),
                            FirstName = "Gregorio de Jesus",
                            LastName = "Rojas Acosta"
                        },
                        new
                        {
                            Id = new Guid("b0286bf5-d928-4f53-8357-627e49f48de0"),
                            FirstName = "Yadira",
                            LastName = "Pinales Delgado"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KindergarterId");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Product", b =>
                {
                    b.HasBaseType("KindergartenAppService.Models.Item");

                    b.HasDiscriminator().HasValue("Product");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Service", b =>
                {
                    b.HasBaseType("KindergartenAppService.Models.Item");

                    b.Property<Guid>("ActivityId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("ServicePeriod");

                    b.HasIndex("ActivityId");

                    b.HasDiscriminator().HasValue("Service");

                    b.HasData(
                        new
                        {
                            Id = new Guid("45249a36-feb2-492d-b718-47012ff8ee25"),
                            Price = 9071m,
                            Reference = "SRV-553",
                            ActivityId = new Guid("8b88105b-c876-4a28-87d7-1f3d0322a0a1"),
                            Description = "Service Clases de ingles",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("58e5a707-829e-4bae-9779-c0426ff22630"),
                            Price = 2915m,
                            Reference = "SRV-513",
                            ActivityId = new Guid("0cd9815a-7009-4030-8dbb-0154b54f688f"),
                            Description = "Service Cuidade matutino",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("3a52e074-9395-4606-8b81-4d3c621b359e"),
                            Price = 5167m,
                            Reference = "SRV-880",
                            ActivityId = new Guid("d5188193-9818-4456-a285-79d5c999fa2d"),
                            Description = "Service Cuidado Vespertino",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("b52b5d61-3c31-417e-83c6-b361ab064ed6"),
                            Price = 5901m,
                            Reference = "SRV-668",
                            ActivityId = new Guid("d42deb14-3394-4985-89ff-331183a5695b"),
                            Description = "Service Cuidado dia completo",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("434e8ff8-6dab-4f98-bfd1-2118d53e3032"),
                            Price = 2220m,
                            Reference = "SRV-823",
                            ActivityId = new Guid("4cdc7f6b-21e3-4d66-828c-85cb5dc95dc6"),
                            Description = "Service Clases de Ballet",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("a05e44d1-a5de-4ad9-b0e2-928abb51b1cd"),
                            Price = 8063m,
                            Reference = "SRV-257",
                            ActivityId = new Guid("aae44eba-e3d8-40ec-958c-00cf40889477"),
                            Description = "Service Clases de logica",
                            ServicePeriod = 77
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Activity", b =>
                {
                    b.HasOne("KindergartenAppService.Models.ActivityTemplate", "ActivityTemplate")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.ActivityTemplate", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("ActivityTemplates")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.EnrollActivity", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Enrollment", "Enrollment")
                        .WithMany("EnrollActivities")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Enrollment", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithOne("Enrollment")
                        .HasForeignKey("KindergartenAppService.Models.Enrollment", "KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.FeedingKid", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Feeding", "Fedding")
                        .WithMany("FeedingKids")
                        .HasForeignKey("FeddingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("FeedingKids")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Invoice", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany()
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.InvoiceDetail", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("KindergartenAppService.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kid", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("Kids")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Tutor", "Tutor")
                        .WithMany("Kids")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.MedicalRecord", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Payment", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Receipt", "Receipt")
                        .WithMany("Payments")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Precense", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("Precenses")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Stock", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Product", "Product")
                        .WithMany("Stock")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Store", "Store")
                        .WithMany("Stock")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.SubActivities", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany("SubActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.User", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("Users")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Service", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
