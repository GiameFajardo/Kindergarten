// <auto-generated />
using System;
using KindergartenAppService.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KindergartenAppService.Migrations
{
    [DbContext(typeof(KindergarterContext))]
    [Migration("20190805222026_Adding_TutorSecundary_to_Kid")]
    partial class Adding_TutorSecundary_to_Kid
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KindergartenAppService.Models.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityTemplateId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ActivityTemplateId");

                    b.ToTable("Activity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b42040ee-4c33-449a-881c-99428ba496b3"),
                            ActivityTemplateId = new Guid("84421da6-e3bb-4cb9-8cb0-09f872d43e51"),
                            Description = "Clases de ingles"
                        },
                        new
                        {
                            Id = new Guid("abb09f6f-7aa5-4822-b299-600d84a74f46"),
                            ActivityTemplateId = new Guid("72a9f25c-dcc3-4bcc-9297-ed761836dd1c"),
                            Description = "Cuidade matutino"
                        },
                        new
                        {
                            Id = new Guid("c2f2cdc8-92f9-4586-9bed-fd358bffd15a"),
                            ActivityTemplateId = new Guid("97f36898-913c-400c-a03c-198411367dc2"),
                            Description = "Cuidado Vespertino"
                        },
                        new
                        {
                            Id = new Guid("6b5e622f-b719-438f-90f8-3c5eaba2bc0c"),
                            ActivityTemplateId = new Guid("d0aa6637-5380-46a4-aa70-a7d14ceaa9c0"),
                            Description = "Cuidado dia completo"
                        },
                        new
                        {
                            Id = new Guid("b6b08d32-7d08-4bfb-bee7-69c8c67266f9"),
                            ActivityTemplateId = new Guid("36940db3-dea1-43c6-b907-966af699e5a2"),
                            Description = "Clases de Ballet"
                        },
                        new
                        {
                            Id = new Guid("38fd512a-b0bd-4970-b1c7-751b89bcf254"),
                            ActivityTemplateId = new Guid("89e442ff-656e-4fdf-a46d-44c72cc31c10"),
                            Description = "Clases de logica"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.ActivityTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<Guid>("KindergarterId");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.ToTable("ActivityTemplate");

                    b.HasData(
                        new
                        {
                            Id = new Guid("84421da6-e3bb-4cb9-8cb0-09f872d43e51"),
                            Description = "Clases de ingles",
                            KindergarterId = new Guid("51af87e0-2918-459b-ae69-d487052307e4")
                        },
                        new
                        {
                            Id = new Guid("72a9f25c-dcc3-4bcc-9297-ed761836dd1c"),
                            Description = "Cuidade matutino",
                            KindergarterId = new Guid("51af87e0-2918-459b-ae69-d487052307e4")
                        },
                        new
                        {
                            Id = new Guid("97f36898-913c-400c-a03c-198411367dc2"),
                            Description = "Cuidado Vespertino",
                            KindergarterId = new Guid("51af87e0-2918-459b-ae69-d487052307e4")
                        },
                        new
                        {
                            Id = new Guid("d0aa6637-5380-46a4-aa70-a7d14ceaa9c0"),
                            Description = "Cuidado dia completo",
                            KindergarterId = new Guid("51af87e0-2918-459b-ae69-d487052307e4")
                        },
                        new
                        {
                            Id = new Guid("36940db3-dea1-43c6-b907-966af699e5a2"),
                            Description = "Clases de Ballet",
                            KindergarterId = new Guid("51af87e0-2918-459b-ae69-d487052307e4")
                        },
                        new
                        {
                            Id = new Guid("89e442ff-656e-4fdf-a46d-44c72cc31c10"),
                            Description = "Clases de logica",
                            KindergarterId = new Guid("51af87e0-2918-459b-ae69-d487052307e4")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.EnrollActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityId");

                    b.Property<Guid>("EnrollmentId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EnrollmentId");

                    b.ToTable("EnrollActivity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a63c4d56-8a39-4ac4-b90c-92be1e4bb3d0"),
                            ActivityId = new Guid("c2f2cdc8-92f9-4586-9bed-fd358bffd15a"),
                            EnrollmentId = new Guid("49204268-3769-48c2-8584-5aec9caefab3")
                        },
                        new
                        {
                            Id = new Guid("dd3e2ee1-4247-474b-9381-9283c609c1b8"),
                            ActivityId = new Guid("b6b08d32-7d08-4bfb-bee7-69c8c67266f9"),
                            EnrollmentId = new Guid("6687c358-8d3b-419f-a1a6-bae06994201c")
                        },
                        new
                        {
                            Id = new Guid("1e6c5380-5910-4e8a-87ae-7a74a5abf075"),
                            ActivityId = new Guid("b6b08d32-7d08-4bfb-bee7-69c8c67266f9"),
                            EnrollmentId = new Guid("6bd5ec18-0e76-4751-8610-4cfdd2d89a87")
                        },
                        new
                        {
                            Id = new Guid("6be8e0d4-c7d4-4cf1-8ce8-a458df47908f"),
                            ActivityId = new Guid("38fd512a-b0bd-4970-b1c7-751b89bcf254"),
                            EnrollmentId = new Guid("76588d1a-fdc3-464b-a87b-cb8b3c867be4")
                        },
                        new
                        {
                            Id = new Guid("26681be5-7a6c-40e1-83b5-e416f7b7ca08"),
                            ActivityId = new Guid("abb09f6f-7aa5-4822-b299-600d84a74f46"),
                            EnrollmentId = new Guid("4d2291a3-3a4c-48e8-b243-8c96b961b617")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime>("EnrollDay");

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId")
                        .IsUnique();

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("49204268-3769-48c2-8584-5aec9caefab3"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("00091a53-fed5-4037-bd5c-e9b20d2c7d08")
                        },
                        new
                        {
                            Id = new Guid("6687c358-8d3b-419f-a1a6-bae06994201c"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("0025e092-4df1-4844-b8a0-295e05454804")
                        },
                        new
                        {
                            Id = new Guid("6bd5ec18-0e76-4751-8610-4cfdd2d89a87"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("00c58263-eed5-4a10-805d-37eda69e0780")
                        },
                        new
                        {
                            Id = new Guid("76588d1a-fdc3-464b-a87b-cb8b3c867be4"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("0123a20e-fe35-48da-93e3-ecb845100cef")
                        },
                        new
                        {
                            Id = new Guid("4d2291a3-3a4c-48e8-b243-8c96b961b617"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("01271909-de28-45f7-93be-9a78edbe3413")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Feeding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Feeding");
                });

            modelBuilder.Entity("KindergartenAppService.Models.FeedingKid", b =>
                {
                    b.Property<Guid>("KidId");

                    b.Property<Guid>("FeddingId");

                    b.HasKey("KidId", "FeddingId");

                    b.HasIndex("FeddingId");

                    b.ToTable("FeedingKid");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("KindergartenAppService.Models.InvoiceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<Guid?>("InvoiceId");

                    b.Property<Guid>("ItemId");

                    b.Property<decimal>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ItemId");

                    b.ToTable("InvoiceDetail");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.Property<string>("Reference")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Item");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Item");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Diseases");

                    b.Property<string>("FatherName")
                        .IsRequired();

                    b.Property<string>("FavoriteActivities");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<Guid>("KindergarterId");

                    b.Property<string>("MotherName");

                    b.Property<Guid?>("PediatricianId");

                    b.Property<string>("SecondName");

                    b.Property<int>("Sex");

                    b.Property<int>("SiblingCount");

                    b.Property<int>("TShirtSize");

                    b.Property<Guid?>("TutorId");

                    b.Property<Guid?>("TutorPrincipalId");

                    b.Property<Guid?>("TutorSecundaryId");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.HasIndex("PediatricianId");

                    b.HasIndex("TutorId");

                    b.HasIndex("TutorPrincipalId");

                    b.HasIndex("TutorSecundaryId");

                    b.ToTable("Kid");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00091a53-fed5-4037-bd5c-e9b20d2c7d08"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Faringtom",
                            FirstName = "Johan",
                            KindergarterId = new Guid("51af87e0-2918-459b-ae69-d487052307e4"),
                            MotherName = "Washinton",
                            SecondName = "Eduardo",
                            Sex = 0,
                            SiblingCount = 0,
                            TShirtSize = 0,
                            TutorPrincipalId = new Guid("239cad8d-3bfc-4520-be32-a5bb02eee899")
                        },
                        new
                        {
                            Id = new Guid("0025e092-4df1-4844-b8a0-295e05454804"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Faringtom",
                            FirstName = "Lyan",
                            KindergarterId = new Guid("51af87e0-2918-459b-ae69-d487052307e4"),
                            MotherName = "Washinton",
                            SecondName = "Eduardo",
                            Sex = 0,
                            SiblingCount = 0,
                            TShirtSize = 0,
                            TutorPrincipalId = new Guid("239cad8d-3bfc-4520-be32-a5bb02eee899")
                        },
                        new
                        {
                            Id = new Guid("00c58263-eed5-4a10-805d-37eda69e0780"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Stackeetam",
                            FirstName = "Aaron",
                            KindergarterId = new Guid("51af87e0-2918-459b-ae69-d487052307e4"),
                            MotherName = "Snow",
                            SecondName = "Eduardo",
                            Sex = 0,
                            SiblingCount = 0,
                            TShirtSize = 0,
                            TutorPrincipalId = new Guid("239cad8d-3bfc-4520-be32-a5bb02eee899")
                        },
                        new
                        {
                            Id = new Guid("0123a20e-fe35-48da-93e3-ecb845100cef"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Faringtom",
                            FirstName = "Lyan",
                            KindergarterId = new Guid("51af87e0-2918-459b-ae69-d487052307e4"),
                            MotherName = "Worm",
                            SecondName = "Enrique",
                            Sex = 0,
                            SiblingCount = 0,
                            TShirtSize = 0,
                            TutorPrincipalId = new Guid("239cad8d-3bfc-4520-be32-a5bb02eee899")
                        },
                        new
                        {
                            Id = new Guid("01271909-de28-45f7-93be-9a78edbe3413"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Stackeetam",
                            FirstName = "Johan",
                            KindergarterId = new Guid("51af87e0-2918-459b-ae69-d487052307e4"),
                            MotherName = "Worm",
                            SecondName = "Emilio",
                            Sex = 0,
                            SiblingCount = 0,
                            TShirtSize = 0,
                            TutorPrincipalId = new Guid("239cad8d-3bfc-4520-be32-a5bb02eee899")
                        },
                        new
                        {
                            Id = new Guid("018bd892-0497-4bd4-982f-513068c44c59"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Escobar",
                            FirstName = "Johan",
                            KindergarterId = new Guid("51af87e0-2918-459b-ae69-d487052307e4"),
                            MotherName = "Snow",
                            SecondName = "Carlos",
                            Sex = 0,
                            SiblingCount = 0,
                            TShirtSize = 0,
                            TutorPrincipalId = new Guid("239cad8d-3bfc-4520-be32-a5bb02eee899")
                        },
                        new
                        {
                            Id = new Guid("018e7a0a-bd29-40ba-8827-55483f3f16ee"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Stackeetam",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("51af87e0-2918-459b-ae69-d487052307e4"),
                            MotherName = "Washinton",
                            SecondName = "Enrique",
                            Sex = 0,
                            SiblingCount = 0,
                            TShirtSize = 0,
                            TutorPrincipalId = new Guid("239cad8d-3bfc-4520-be32-a5bb02eee899")
                        },
                        new
                        {
                            Id = new Guid("040e0cf9-723a-436f-a7a3-629743068b8a"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Lee",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("51af87e0-2918-459b-ae69-d487052307e4"),
                            MotherName = "Worm",
                            SecondName = "Eduardo",
                            Sex = 0,
                            SiblingCount = 0,
                            TShirtSize = 0,
                            TutorPrincipalId = new Guid("239cad8d-3bfc-4520-be32-a5bb02eee899")
                        },
                        new
                        {
                            Id = new Guid("043a2596-7cd2-4f2f-b1e7-322a378a6d55"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Escobar",
                            FirstName = "Lyan",
                            KindergarterId = new Guid("51af87e0-2918-459b-ae69-d487052307e4"),
                            MotherName = "Washinton",
                            SecondName = "Eduardo",
                            Sex = 0,
                            SiblingCount = 0,
                            TShirtSize = 0,
                            TutorPrincipalId = new Guid("239cad8d-3bfc-4520-be32-a5bb02eee899")
                        },
                        new
                        {
                            Id = new Guid("04470ba6-b289-4978-9179-9935905da9a5"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Lee",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("51af87e0-2918-459b-ae69-d487052307e4"),
                            MotherName = "Snow",
                            SecondName = "Eduardo",
                            Sex = 0,
                            SiblingCount = 0,
                            TShirtSize = 0,
                            TutorPrincipalId = new Guid("239cad8d-3bfc-4520-be32-a5bb02eee899")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kindergarter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Kindergarters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("51af87e0-2918-459b-ae69-d487052307e4"),
                            Description = "KPH"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("MedicalRecord");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Payment", b =>
                {
                    b.Property<Guid>("InvoiceId");

                    b.Property<Guid>("ReceiptId");

                    b.HasKey("InvoiceId", "ReceiptId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Pediatrician", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Pediatrician");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Precense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KidId");

                    b.Property<DateTime>("PrecenseDay");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("Precense");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Receipt");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Stock", b =>
                {
                    b.Property<Guid>("StoreId");

                    b.Property<Guid>("ProductId");

                    b.HasKey("StoreId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.HasKey("Id");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("KindergartenAppService.Models.SubActivities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityId");

                    b.Property<DateTime>("Date");

                    b.Property<TimeSpan>("EndingTime");

                    b.Property<TimeSpan>("StaringTime");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("SubActivities");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Tutor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Mail");

                    b.Property<string>("MovilNumber");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Tutors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("239cad8d-3bfc-4520-be32-a5bb02eee899"),
                            FirstName = "Gregorio de Jesus",
                            LastName = "Rojas Acosta"
                        },
                        new
                        {
                            Id = new Guid("c04dbe8c-eba2-4c77-8f46-7f8402957cc9"),
                            FirstName = "Yadira",
                            LastName = "Pinales Delgado"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KindergarterId");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Product", b =>
                {
                    b.HasBaseType("KindergartenAppService.Models.Item");

                    b.HasDiscriminator().HasValue("Product");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Service", b =>
                {
                    b.HasBaseType("KindergartenAppService.Models.Item");

                    b.Property<Guid>("ActivityId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("ServicePeriod");

                    b.HasIndex("ActivityId");

                    b.HasDiscriminator().HasValue("Service");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9041b72b-d1c9-4463-b55c-ae785a9fccb6"),
                            Price = 8085m,
                            Reference = "SRV-361",
                            ActivityId = new Guid("b42040ee-4c33-449a-881c-99428ba496b3"),
                            Description = "Service Clases de ingles",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("5ac835d3-fb32-429b-9b88-691c74a08a25"),
                            Price = 1494m,
                            Reference = "SRV-910",
                            ActivityId = new Guid("abb09f6f-7aa5-4822-b299-600d84a74f46"),
                            Description = "Service Cuidade matutino",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("04342f79-c97f-4ab3-a53c-003d15b57f04"),
                            Price = 2654m,
                            Reference = "SRV-167",
                            ActivityId = new Guid("c2f2cdc8-92f9-4586-9bed-fd358bffd15a"),
                            Description = "Service Cuidado Vespertino",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("2c5b686a-cd6b-4639-a49d-964408624160"),
                            Price = 892m,
                            Reference = "SRV-467",
                            ActivityId = new Guid("6b5e622f-b719-438f-90f8-3c5eaba2bc0c"),
                            Description = "Service Cuidado dia completo",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("afae4ea6-e903-4790-a969-c34c742b784e"),
                            Price = 8535m,
                            Reference = "SRV-947",
                            ActivityId = new Guid("b6b08d32-7d08-4bfb-bee7-69c8c67266f9"),
                            Description = "Service Clases de Ballet",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("eb3bb085-4452-4407-a562-04f1f0ef8b66"),
                            Price = 1965m,
                            Reference = "SRV-864",
                            ActivityId = new Guid("38fd512a-b0bd-4970-b1c7-751b89bcf254"),
                            Description = "Service Clases de logica",
                            ServicePeriod = 77
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Activity", b =>
                {
                    b.HasOne("KindergartenAppService.Models.ActivityTemplate", "ActivityTemplate")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.ActivityTemplate", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("ActivityTemplates")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.EnrollActivity", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Enrollment", "Enrollment")
                        .WithMany("EnrollActivities")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Enrollment", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithOne("Enrollment")
                        .HasForeignKey("KindergartenAppService.Models.Enrollment", "KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.FeedingKid", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Feeding", "Fedding")
                        .WithMany("FeedingKids")
                        .HasForeignKey("FeddingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("FeedingKids")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Invoice", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany()
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.InvoiceDetail", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("KindergartenAppService.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kid", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("Kids")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Pediatrician", "Pediatrician")
                        .WithMany("Kids")
                        .HasForeignKey("PediatricianId");

                    b.HasOne("KindergartenAppService.Models.Tutor")
                        .WithMany("Kids")
                        .HasForeignKey("TutorId");

                    b.HasOne("KindergartenAppService.Models.Tutor", "TutorPrincipal")
                        .WithMany()
                        .HasForeignKey("TutorPrincipalId");

                    b.HasOne("KindergartenAppService.Models.Tutor", "TutorSecundary")
                        .WithMany()
                        .HasForeignKey("TutorSecundaryId");
                });

            modelBuilder.Entity("KindergartenAppService.Models.MedicalRecord", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Payment", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Receipt", "Receipt")
                        .WithMany("Payments")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Precense", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("Precenses")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Stock", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Product", "Product")
                        .WithMany("Stock")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Store", "Store")
                        .WithMany("Stock")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.SubActivities", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany("SubActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.User", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("Users")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Service", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
