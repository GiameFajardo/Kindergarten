// <auto-generated />
using System;
using KindergartenAppService.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KindergartenAppService.Migrations
{
    [DbContext(typeof(KindergarterContext))]
    [Migration("20190728140920_Remove_Kid_From_Enrollment")]
    partial class Remove_Kid_From_Enrollment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KindergartenAppService.Models.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityTemplateId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ActivityTemplateId");

                    b.ToTable("Activity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eca74429-1868-4dc3-a964-b5247ebc767d"),
                            ActivityTemplateId = new Guid("9ebe0415-a26e-4fb5-80f4-a048a118819c"),
                            Description = "Clases de ingles"
                        },
                        new
                        {
                            Id = new Guid("a5309473-c110-41c5-a1ba-8785491ca298"),
                            ActivityTemplateId = new Guid("f3c3e8c4-9902-49a5-a9fc-9e9505c6a52b"),
                            Description = "Cuidade matutino"
                        },
                        new
                        {
                            Id = new Guid("33f9e0c2-57cc-4931-ab79-973245aa6ed6"),
                            ActivityTemplateId = new Guid("7a746541-48d4-4c59-88f9-6590d4b29ec8"),
                            Description = "Cuidado Vespertino"
                        },
                        new
                        {
                            Id = new Guid("5940c943-cd58-4aa4-93a4-ea91d4c088c1"),
                            ActivityTemplateId = new Guid("d72dfd54-a769-469c-938a-1a7439e4daeb"),
                            Description = "Cuidado dia completo"
                        },
                        new
                        {
                            Id = new Guid("bb7b70d9-cb1e-4fdb-ac6d-e20af08b09a7"),
                            ActivityTemplateId = new Guid("f18fd1e2-0dea-410d-b800-6b13a79d388b"),
                            Description = "Clases de Ballet"
                        },
                        new
                        {
                            Id = new Guid("9c08d64f-e56d-4530-81a5-71b9f162ff14"),
                            ActivityTemplateId = new Guid("d9f27104-bde6-4b60-b8b5-56798fd5a23f"),
                            Description = "Clases de logica"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.ActivityTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<Guid>("KindergarterId");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.ToTable("ActivityTemplate");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ebe0415-a26e-4fb5-80f4-a048a118819c"),
                            Description = "Clases de ingles",
                            KindergarterId = new Guid("e17ab00e-d325-47d3-ba68-57b03567fa5a")
                        },
                        new
                        {
                            Id = new Guid("f3c3e8c4-9902-49a5-a9fc-9e9505c6a52b"),
                            Description = "Cuidade matutino",
                            KindergarterId = new Guid("e17ab00e-d325-47d3-ba68-57b03567fa5a")
                        },
                        new
                        {
                            Id = new Guid("7a746541-48d4-4c59-88f9-6590d4b29ec8"),
                            Description = "Cuidado Vespertino",
                            KindergarterId = new Guid("e17ab00e-d325-47d3-ba68-57b03567fa5a")
                        },
                        new
                        {
                            Id = new Guid("d72dfd54-a769-469c-938a-1a7439e4daeb"),
                            Description = "Cuidado dia completo",
                            KindergarterId = new Guid("e17ab00e-d325-47d3-ba68-57b03567fa5a")
                        },
                        new
                        {
                            Id = new Guid("f18fd1e2-0dea-410d-b800-6b13a79d388b"),
                            Description = "Clases de Ballet",
                            KindergarterId = new Guid("e17ab00e-d325-47d3-ba68-57b03567fa5a")
                        },
                        new
                        {
                            Id = new Guid("d9f27104-bde6-4b60-b8b5-56798fd5a23f"),
                            Description = "Clases de logica",
                            KindergarterId = new Guid("e17ab00e-d325-47d3-ba68-57b03567fa5a")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.EnrollActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityId");

                    b.Property<Guid?>("EnrollmentId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EnrollmentId");

                    b.ToTable("EnrollActivity");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EnrollDay");

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Feeding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Feeding");
                });

            modelBuilder.Entity("KindergartenAppService.Models.FeedingKid", b =>
                {
                    b.Property<Guid>("KidId");

                    b.Property<Guid>("FeddingId");

                    b.HasKey("KidId", "FeddingId");

                    b.HasIndex("FeddingId");

                    b.ToTable("FeedingKid");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("KindergartenAppService.Models.InvoiceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<Guid?>("InvoiceId");

                    b.Property<Guid>("ItemId");

                    b.Property<decimal>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ItemId");

                    b.ToTable("InvoiceDetail");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.Property<string>("Reference")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Item");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Item");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FatherName")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<Guid>("KindergarterId");

                    b.Property<string>("MotherName");

                    b.Property<string>("SecondName");

                    b.Property<Guid>("TutorId");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.HasIndex("TutorId");

                    b.ToTable("Kid");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01edb270-9a07-43aa-aef3-3241ad036c47"),
                            FatherName = "Faringtom",
                            FirstName = "Lyan",
                            KindergarterId = new Guid("e17ab00e-d325-47d3-ba68-57b03567fa5a"),
                            MotherName = "Worm",
                            SecondName = "Carlos",
                            TutorId = new Guid("c0bd3a32-4cef-4867-b4c1-48b4777a9cc1")
                        },
                        new
                        {
                            Id = new Guid("022264b2-3a62-4d23-baaa-e6399a69c87b"),
                            FatherName = "Lee",
                            FirstName = "Lyan",
                            KindergarterId = new Guid("e17ab00e-d325-47d3-ba68-57b03567fa5a"),
                            MotherName = "Worm",
                            SecondName = "Emilio",
                            TutorId = new Guid("c0bd3a32-4cef-4867-b4c1-48b4777a9cc1")
                        },
                        new
                        {
                            Id = new Guid("02f3582a-8764-4f21-b946-6bc1c2171f73"),
                            FatherName = "Faringtom",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("e17ab00e-d325-47d3-ba68-57b03567fa5a"),
                            MotherName = "Snow",
                            SecondName = "Emilio",
                            TutorId = new Guid("c0bd3a32-4cef-4867-b4c1-48b4777a9cc1")
                        },
                        new
                        {
                            Id = new Guid("0339a60a-659b-477d-8173-e999bc221511"),
                            FatherName = "Stackeetam",
                            FirstName = "Lyan",
                            KindergarterId = new Guid("e17ab00e-d325-47d3-ba68-57b03567fa5a"),
                            MotherName = "White",
                            SecondName = "Eduardo",
                            TutorId = new Guid("c0bd3a32-4cef-4867-b4c1-48b4777a9cc1")
                        },
                        new
                        {
                            Id = new Guid("041f07d9-c738-46f5-abf9-eeef7639f294"),
                            FatherName = "Stackeetam",
                            FirstName = "Lyan",
                            KindergarterId = new Guid("e17ab00e-d325-47d3-ba68-57b03567fa5a"),
                            MotherName = "Washinton",
                            SecondName = "Carlos",
                            TutorId = new Guid("c0bd3a32-4cef-4867-b4c1-48b4777a9cc1")
                        },
                        new
                        {
                            Id = new Guid("043aa653-8133-43fc-a526-4bb973f617e7"),
                            FatherName = "Stackeetam",
                            FirstName = "Lyan",
                            KindergarterId = new Guid("e17ab00e-d325-47d3-ba68-57b03567fa5a"),
                            MotherName = "Worm",
                            SecondName = "Emilio",
                            TutorId = new Guid("c0bd3a32-4cef-4867-b4c1-48b4777a9cc1")
                        },
                        new
                        {
                            Id = new Guid("052f5f35-664f-4f94-9182-69f8481bcd78"),
                            FatherName = "Escobar",
                            FirstName = "Johan",
                            KindergarterId = new Guid("e17ab00e-d325-47d3-ba68-57b03567fa5a"),
                            MotherName = "Snow",
                            SecondName = "Enrique",
                            TutorId = new Guid("c0bd3a32-4cef-4867-b4c1-48b4777a9cc1")
                        },
                        new
                        {
                            Id = new Guid("07e49c1f-de91-4f5c-9503-1f8e155f78d3"),
                            FatherName = "Faringtom",
                            FirstName = "Johan",
                            KindergarterId = new Guid("e17ab00e-d325-47d3-ba68-57b03567fa5a"),
                            MotherName = "Washinton",
                            SecondName = "Eduardo",
                            TutorId = new Guid("c0bd3a32-4cef-4867-b4c1-48b4777a9cc1")
                        },
                        new
                        {
                            Id = new Guid("0cf794f7-231d-4979-8e02-f339892f9b18"),
                            FatherName = "Faringtom",
                            FirstName = "Aaron",
                            KindergarterId = new Guid("e17ab00e-d325-47d3-ba68-57b03567fa5a"),
                            MotherName = "Washinton",
                            SecondName = "Eduardo",
                            TutorId = new Guid("c0bd3a32-4cef-4867-b4c1-48b4777a9cc1")
                        },
                        new
                        {
                            Id = new Guid("0d66074d-d6c9-495c-89e8-4ee083fdf7da"),
                            FatherName = "Stackeetam",
                            FirstName = "Aaron",
                            KindergarterId = new Guid("e17ab00e-d325-47d3-ba68-57b03567fa5a"),
                            MotherName = "Snow",
                            SecondName = "Emilio",
                            TutorId = new Guid("c0bd3a32-4cef-4867-b4c1-48b4777a9cc1")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kindergarter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Kindergarters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e17ab00e-d325-47d3-ba68-57b03567fa5a"),
                            Description = "Guarderia"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("MedicalRecord");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Payment", b =>
                {
                    b.Property<Guid>("InvoiceId");

                    b.Property<Guid>("ReceiptId");

                    b.HasKey("InvoiceId", "ReceiptId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Precense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KidId");

                    b.Property<DateTime>("PrecenseDay");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("Precense");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Receipt");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Stock", b =>
                {
                    b.Property<Guid>("StoreId");

                    b.Property<Guid>("ProductId");

                    b.HasKey("StoreId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.HasKey("Id");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("KindergartenAppService.Models.SubActivities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityId");

                    b.Property<DateTime>("Date");

                    b.Property<TimeSpan>("EndingTime");

                    b.Property<TimeSpan>("StaringTime");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("SubActivities");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Tutor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Mail");

                    b.Property<string>("MovilNumber");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Tutors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0bd3a32-4cef-4867-b4c1-48b4777a9cc1"),
                            FirstName = "Gregorio de Jesus",
                            LastName = "Rojas Acosta"
                        },
                        new
                        {
                            Id = new Guid("a8782a4e-ae9b-4ce3-a1fb-54068537928a"),
                            FirstName = "Yadira",
                            LastName = "Pinales Delgado"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KindergarterId");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Product", b =>
                {
                    b.HasBaseType("KindergartenAppService.Models.Item");

                    b.HasDiscriminator().HasValue("Product");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Service", b =>
                {
                    b.HasBaseType("KindergartenAppService.Models.Item");

                    b.Property<Guid>("ActivityId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("ServicePeriod");

                    b.HasIndex("ActivityId");

                    b.HasDiscriminator().HasValue("Service");

                    b.HasData(
                        new
                        {
                            Id = new Guid("400d6d2f-fbc1-4b87-8837-715bd03ab30d"),
                            Price = 4743m,
                            Reference = "SRV-975",
                            ActivityId = new Guid("eca74429-1868-4dc3-a964-b5247ebc767d"),
                            Description = "Service Clases de ingles",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("f322c5fb-7102-4191-8e2e-ba7de2f72fa2"),
                            Price = 2204m,
                            Reference = "SRV-525",
                            ActivityId = new Guid("a5309473-c110-41c5-a1ba-8785491ca298"),
                            Description = "Service Cuidade matutino",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("583236d1-0d13-4416-83cf-1c1687388c81"),
                            Price = 5756m,
                            Reference = "SRV-883",
                            ActivityId = new Guid("33f9e0c2-57cc-4931-ab79-973245aa6ed6"),
                            Description = "Service Cuidado Vespertino",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("e4fb193c-e69f-4959-aba8-b1878a2eb4ed"),
                            Price = 6216m,
                            Reference = "SRV-514",
                            ActivityId = new Guid("5940c943-cd58-4aa4-93a4-ea91d4c088c1"),
                            Description = "Service Cuidado dia completo",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("fccc0c79-e6a3-40a8-a07d-c0c1b87b663e"),
                            Price = 8997m,
                            Reference = "SRV-534",
                            ActivityId = new Guid("bb7b70d9-cb1e-4fdb-ac6d-e20af08b09a7"),
                            Description = "Service Clases de Ballet",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("6d5c5f92-b4e0-4688-a69c-2dfcb40ab983"),
                            Price = 7425m,
                            Reference = "SRV-46",
                            ActivityId = new Guid("9c08d64f-e56d-4530-81a5-71b9f162ff14"),
                            Description = "Service Clases de logica",
                            ServicePeriod = 77
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Activity", b =>
                {
                    b.HasOne("KindergartenAppService.Models.ActivityTemplate", "ActivityTemplate")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.ActivityTemplate", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("ActivityTemplates")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.EnrollActivity", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Enrollment")
                        .WithMany("EnrollActivities")
                        .HasForeignKey("EnrollmentId");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Enrollment", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany()
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.FeedingKid", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Feeding", "Fedding")
                        .WithMany("FeedingKids")
                        .HasForeignKey("FeddingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("FeedingKids")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Invoice", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany()
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.InvoiceDetail", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("KindergartenAppService.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kid", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("Kids")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Tutor", "Tutor")
                        .WithMany("Kids")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.MedicalRecord", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Payment", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Receipt", "Receipt")
                        .WithMany("Payments")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Precense", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("Precenses")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Stock", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Product", "Product")
                        .WithMany("Stock")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Store", "Store")
                        .WithMany("Stock")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.SubActivities", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany("SubActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.User", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("Users")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Service", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
