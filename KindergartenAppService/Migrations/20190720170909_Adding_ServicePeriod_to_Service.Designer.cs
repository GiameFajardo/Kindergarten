// <auto-generated />
using System;
using KindergartenAppService.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KindergartenAppService.Migrations
{
    [DbContext(typeof(KindergarterContext))]
    [Migration("20190720170909_Adding_ServicePeriod_to_Service")]
    partial class Adding_ServicePeriod_to_Service
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KindergartenAppService.Models.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<Guid>("KindergarterId");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.ToTable("Activity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d8b436a-ae91-46c3-b08b-da43039f0ca2"),
                            Description = "Clases de ingles",
                            KindergarterId = new Guid("2e6215a3-d9c8-45c5-ba39-e9e1e36360ea")
                        },
                        new
                        {
                            Id = new Guid("8c8cc46a-9375-4017-9f81-2c42fd3b2048"),
                            Description = "Cuidade matutino",
                            KindergarterId = new Guid("2e6215a3-d9c8-45c5-ba39-e9e1e36360ea")
                        },
                        new
                        {
                            Id = new Guid("80c3e424-508d-4f1c-bb18-6b22c8a6fb3a"),
                            Description = "Cuidado Vespertino",
                            KindergarterId = new Guid("2e6215a3-d9c8-45c5-ba39-e9e1e36360ea")
                        },
                        new
                        {
                            Id = new Guid("1c4d4e73-8c3e-4170-bc4e-d2a80b4c6fd9"),
                            Description = "Cuidado dia completo",
                            KindergarterId = new Guid("2e6215a3-d9c8-45c5-ba39-e9e1e36360ea")
                        },
                        new
                        {
                            Id = new Guid("af4cc57d-983c-4d46-9e1b-dc35ab44c118"),
                            Description = "Clases de Ballet",
                            KindergarterId = new Guid("2e6215a3-d9c8-45c5-ba39-e9e1e36360ea")
                        },
                        new
                        {
                            Id = new Guid("0d9e3f4b-5b7d-4314-8487-be7bc2805f84"),
                            Description = "Clases de logica",
                            KindergarterId = new Guid("2e6215a3-d9c8-45c5-ba39-e9e1e36360ea")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.EnrollActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityId");

                    b.Property<Guid?>("EnrollmentId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EnrollmentId");

                    b.ToTable("EnrollActivity");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EnrollDay");

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Feeding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Feeding");
                });

            modelBuilder.Entity("KindergartenAppService.Models.FeedingKid", b =>
                {
                    b.Property<Guid>("KidId");

                    b.Property<Guid>("FeddingId");

                    b.HasKey("KidId", "FeddingId");

                    b.HasIndex("FeddingId");

                    b.ToTable("FeedingKid");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("KindergartenAppService.Models.InvoiceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<Guid?>("InvoiceId");

                    b.Property<Guid>("ItemId");

                    b.Property<decimal>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ItemId");

                    b.ToTable("InvoiceDetail");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.Property<string>("Reference")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Item");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Item");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FatherName")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<Guid>("KindergarterId");

                    b.Property<string>("MotherName");

                    b.Property<string>("SecondName");

                    b.Property<Guid>("TutorId");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.HasIndex("TutorId");

                    b.ToTable("Kid");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00963687-583e-4f7b-bdaf-27d56678c1ea"),
                            FatherName = "Escobar",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("2e6215a3-d9c8-45c5-ba39-e9e1e36360ea"),
                            MotherName = "White",
                            SecondName = "Emilio",
                            TutorId = new Guid("79948198-a56e-4612-9276-d22b58453b90")
                        },
                        new
                        {
                            Id = new Guid("00cb3fc6-9f14-412a-8b47-7499e66e466c"),
                            FatherName = "Escobar",
                            FirstName = "Aaron",
                            KindergarterId = new Guid("2e6215a3-d9c8-45c5-ba39-e9e1e36360ea"),
                            MotherName = "Snow",
                            SecondName = "Enrique",
                            TutorId = new Guid("79948198-a56e-4612-9276-d22b58453b90")
                        },
                        new
                        {
                            Id = new Guid("0208c1ff-80cd-4c23-aa05-7bbd6d1d2f30"),
                            FatherName = "Stackeetam",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("2e6215a3-d9c8-45c5-ba39-e9e1e36360ea"),
                            MotherName = "Washinton",
                            SecondName = "Emilio",
                            TutorId = new Guid("79948198-a56e-4612-9276-d22b58453b90")
                        },
                        new
                        {
                            Id = new Guid("026ab79b-a088-4943-88eb-34dc28ec35ef"),
                            FatherName = "Faringtom",
                            FirstName = "Johan",
                            KindergarterId = new Guid("2e6215a3-d9c8-45c5-ba39-e9e1e36360ea"),
                            MotherName = "Washinton",
                            SecondName = "Emilio",
                            TutorId = new Guid("79948198-a56e-4612-9276-d22b58453b90")
                        },
                        new
                        {
                            Id = new Guid("02af99bf-3d28-432e-8ced-46524ced40c0"),
                            FatherName = "Escobar",
                            FirstName = "Lyan",
                            KindergarterId = new Guid("2e6215a3-d9c8-45c5-ba39-e9e1e36360ea"),
                            MotherName = "Snow",
                            SecondName = "Enrique",
                            TutorId = new Guid("79948198-a56e-4612-9276-d22b58453b90")
                        },
                        new
                        {
                            Id = new Guid("0347137d-a77b-4019-bee2-3d198d63a92e"),
                            FatherName = "Lee",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("2e6215a3-d9c8-45c5-ba39-e9e1e36360ea"),
                            MotherName = "Washinton",
                            SecondName = "Carlos",
                            TutorId = new Guid("79948198-a56e-4612-9276-d22b58453b90")
                        },
                        new
                        {
                            Id = new Guid("05440a9a-980c-45cb-88ca-30a2c6b70ec5"),
                            FatherName = "Lee",
                            FirstName = "Johan",
                            KindergarterId = new Guid("2e6215a3-d9c8-45c5-ba39-e9e1e36360ea"),
                            MotherName = "Snow",
                            SecondName = "Carlos",
                            TutorId = new Guid("79948198-a56e-4612-9276-d22b58453b90")
                        },
                        new
                        {
                            Id = new Guid("054da3c6-f81e-4ef9-b7b4-ad16b1f1fb85"),
                            FatherName = "Faringtom",
                            FirstName = "Aaron",
                            KindergarterId = new Guid("2e6215a3-d9c8-45c5-ba39-e9e1e36360ea"),
                            MotherName = "Washinton",
                            SecondName = "Carlos",
                            TutorId = new Guid("79948198-a56e-4612-9276-d22b58453b90")
                        },
                        new
                        {
                            Id = new Guid("06e4a271-e77a-4c89-95b4-f98f86cd1416"),
                            FatherName = "Lee",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("2e6215a3-d9c8-45c5-ba39-e9e1e36360ea"),
                            MotherName = "Snow",
                            SecondName = "Enrique",
                            TutorId = new Guid("79948198-a56e-4612-9276-d22b58453b90")
                        },
                        new
                        {
                            Id = new Guid("07cc9a50-c827-4f14-b0df-071131932316"),
                            FatherName = "Lee",
                            FirstName = "Johan",
                            KindergarterId = new Guid("2e6215a3-d9c8-45c5-ba39-e9e1e36360ea"),
                            MotherName = "Washinton",
                            SecondName = "Eduardo",
                            TutorId = new Guid("79948198-a56e-4612-9276-d22b58453b90")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kindergarter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Kindergarters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e6215a3-d9c8-45c5-ba39-e9e1e36360ea"),
                            Description = "Guarderia"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("MedicalRecord");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Payment", b =>
                {
                    b.Property<Guid>("InvoiceId");

                    b.Property<Guid>("ReceiptId");

                    b.HasKey("InvoiceId", "ReceiptId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Precense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KidId");

                    b.Property<DateTime>("PrecenseDay");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("Precense");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Receipt");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Stock", b =>
                {
                    b.Property<Guid>("StoreId");

                    b.Property<Guid>("ProductId");

                    b.HasKey("StoreId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.HasKey("Id");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Tutor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Mail");

                    b.Property<string>("MovilNumber");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Tutors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("79948198-a56e-4612-9276-d22b58453b90"),
                            FirstName = "Gregorio de Jesus",
                            LastName = "Rojas Acosta"
                        },
                        new
                        {
                            Id = new Guid("9543f9a8-13fd-480a-bf7e-2b57dfadf4f6"),
                            FirstName = "Yadira",
                            LastName = "Pinales Delgado"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KindergarterId");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Product", b =>
                {
                    b.HasBaseType("KindergartenAppService.Models.Item");

                    b.HasDiscriminator().HasValue("Product");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Service", b =>
                {
                    b.HasBaseType("KindergartenAppService.Models.Item");

                    b.Property<Guid>("ActivityId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("ServicePeriod");

                    b.HasIndex("ActivityId");

                    b.HasDiscriminator().HasValue("Service");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2a6d136-477a-4f4e-bc38-bb89587c2081"),
                            Price = 2777m,
                            Reference = "SRV-981",
                            ActivityId = new Guid("2d8b436a-ae91-46c3-b08b-da43039f0ca2"),
                            Description = "Service Clases de ingles",
                            ServicePeriod = 0
                        },
                        new
                        {
                            Id = new Guid("4a854f55-10b7-44db-9c64-ff3a793f606d"),
                            Price = 9868m,
                            Reference = "SRV-85",
                            ActivityId = new Guid("8c8cc46a-9375-4017-9f81-2c42fd3b2048"),
                            Description = "Service Cuidade matutino",
                            ServicePeriod = 0
                        },
                        new
                        {
                            Id = new Guid("34f83c8d-3cec-4bbb-9f2f-25080facfaa4"),
                            Price = 8868m,
                            Reference = "SRV-78",
                            ActivityId = new Guid("80c3e424-508d-4f1c-bb18-6b22c8a6fb3a"),
                            Description = "Service Cuidado Vespertino",
                            ServicePeriod = 0
                        },
                        new
                        {
                            Id = new Guid("b4083002-f8cf-4f47-aee6-7515ada2bedb"),
                            Price = 6581m,
                            Reference = "SRV-865",
                            ActivityId = new Guid("1c4d4e73-8c3e-4170-bc4e-d2a80b4c6fd9"),
                            Description = "Service Cuidado dia completo",
                            ServicePeriod = 0
                        },
                        new
                        {
                            Id = new Guid("9faae3cd-efe8-40a6-b07b-0a0ef8e56165"),
                            Price = 6956m,
                            Reference = "SRV-581",
                            ActivityId = new Guid("af4cc57d-983c-4d46-9e1b-dc35ab44c118"),
                            Description = "Service Clases de Ballet",
                            ServicePeriod = 0
                        },
                        new
                        {
                            Id = new Guid("f26d6663-72aa-4270-88dd-676e5766f37a"),
                            Price = 6933m,
                            Reference = "SRV-50",
                            ActivityId = new Guid("0d9e3f4b-5b7d-4314-8487-be7bc2805f84"),
                            Description = "Service Clases de logica",
                            ServicePeriod = 0
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Activity", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("Activities")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.EnrollActivity", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Enrollment")
                        .WithMany("EnrollActivities")
                        .HasForeignKey("EnrollmentId");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Enrollment", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany()
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.FeedingKid", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Feeding", "Fedding")
                        .WithMany("FeedingKids")
                        .HasForeignKey("FeddingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("FeedingKids")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Invoice", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany()
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.InvoiceDetail", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("KindergartenAppService.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kid", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("Kids")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Tutor", "Tutor")
                        .WithMany("Kids")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.MedicalRecord", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Payment", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Receipt", "Receipt")
                        .WithMany("Payments")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Precense", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("Precenses")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Stock", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Product", "Product")
                        .WithMany("Stock")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Store", "Store")
                        .WithMany("Stock")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.User", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("Users")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Service", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
