// <auto-generated />
using System;
using KindergartenAppService.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KindergartenAppService.Migrations
{
    [DbContext(typeof(KindergarterContext))]
    [Migration("20190805205634_Adding_SiblingCount_to_Kid")]
    partial class Adding_SiblingCount_to_Kid
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KindergartenAppService.Models.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityTemplateId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ActivityTemplateId");

                    b.ToTable("Activity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0d3d0fc-a7eb-4772-9e4f-725d167014fe"),
                            ActivityTemplateId = new Guid("7aea95d2-9f9a-4d62-920c-dc442be0af2d"),
                            Description = "Clases de ingles"
                        },
                        new
                        {
                            Id = new Guid("bb6ec32c-bc6d-4286-a631-0b641cdea782"),
                            ActivityTemplateId = new Guid("c7a0c679-1717-46f7-9f45-da9153a6a9a4"),
                            Description = "Cuidade matutino"
                        },
                        new
                        {
                            Id = new Guid("b189d9df-946e-4315-bf6f-986ca1c36e69"),
                            ActivityTemplateId = new Guid("fd6e0d8f-f92b-46c7-a37a-501f5528e144"),
                            Description = "Cuidado Vespertino"
                        },
                        new
                        {
                            Id = new Guid("dec6a963-9e08-4373-9238-91713b80a7b6"),
                            ActivityTemplateId = new Guid("ea3c552b-98df-4e3c-9127-9650639cae76"),
                            Description = "Cuidado dia completo"
                        },
                        new
                        {
                            Id = new Guid("0d4fbdbc-6d67-4855-ac68-4a4a47c76bb4"),
                            ActivityTemplateId = new Guid("d3d23037-7ae3-4005-8cc2-235acaaf0f54"),
                            Description = "Clases de Ballet"
                        },
                        new
                        {
                            Id = new Guid("4dfd6ae0-f00d-46b2-a567-2f5c94de134b"),
                            ActivityTemplateId = new Guid("66bca942-7b3b-4f3e-831c-b7863268030d"),
                            Description = "Clases de logica"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.ActivityTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<Guid>("KindergarterId");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.ToTable("ActivityTemplate");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7aea95d2-9f9a-4d62-920c-dc442be0af2d"),
                            Description = "Clases de ingles",
                            KindergarterId = new Guid("7a9c17fa-02ee-466e-97f8-feb6e20f599c")
                        },
                        new
                        {
                            Id = new Guid("c7a0c679-1717-46f7-9f45-da9153a6a9a4"),
                            Description = "Cuidade matutino",
                            KindergarterId = new Guid("7a9c17fa-02ee-466e-97f8-feb6e20f599c")
                        },
                        new
                        {
                            Id = new Guid("fd6e0d8f-f92b-46c7-a37a-501f5528e144"),
                            Description = "Cuidado Vespertino",
                            KindergarterId = new Guid("7a9c17fa-02ee-466e-97f8-feb6e20f599c")
                        },
                        new
                        {
                            Id = new Guid("ea3c552b-98df-4e3c-9127-9650639cae76"),
                            Description = "Cuidado dia completo",
                            KindergarterId = new Guid("7a9c17fa-02ee-466e-97f8-feb6e20f599c")
                        },
                        new
                        {
                            Id = new Guid("d3d23037-7ae3-4005-8cc2-235acaaf0f54"),
                            Description = "Clases de Ballet",
                            KindergarterId = new Guid("7a9c17fa-02ee-466e-97f8-feb6e20f599c")
                        },
                        new
                        {
                            Id = new Guid("66bca942-7b3b-4f3e-831c-b7863268030d"),
                            Description = "Clases de logica",
                            KindergarterId = new Guid("7a9c17fa-02ee-466e-97f8-feb6e20f599c")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.EnrollActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityId");

                    b.Property<Guid>("EnrollmentId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EnrollmentId");

                    b.ToTable("EnrollActivity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("94885b1f-c5c5-4561-90af-d8645be3a327"),
                            ActivityId = new Guid("b189d9df-946e-4315-bf6f-986ca1c36e69"),
                            EnrollmentId = new Guid("fbdafe7a-d595-42eb-8955-ab80811e8d1e")
                        },
                        new
                        {
                            Id = new Guid("af6f77f3-0dc0-4af1-99b3-71257d540a59"),
                            ActivityId = new Guid("b189d9df-946e-4315-bf6f-986ca1c36e69"),
                            EnrollmentId = new Guid("48208912-5cd1-4e19-9309-fc7d74bb198a")
                        },
                        new
                        {
                            Id = new Guid("6983dd07-3165-4e10-9a95-cf06599e3834"),
                            ActivityId = new Guid("b189d9df-946e-4315-bf6f-986ca1c36e69"),
                            EnrollmentId = new Guid("d1081690-b33d-48ed-b20b-d60fb8cadbe5")
                        },
                        new
                        {
                            Id = new Guid("b97f035a-f6b2-4290-ae14-e4fa0dfc278d"),
                            ActivityId = new Guid("b189d9df-946e-4315-bf6f-986ca1c36e69"),
                            EnrollmentId = new Guid("64d6cd49-3369-4885-b6b3-09782b60a3ff")
                        },
                        new
                        {
                            Id = new Guid("26506b0c-9308-49b9-925d-d007a47154e0"),
                            ActivityId = new Guid("f0d3d0fc-a7eb-4772-9e4f-725d167014fe"),
                            EnrollmentId = new Guid("540c8f37-5ab4-4a16-9fae-fbcb6318459d")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime>("EnrollDay");

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId")
                        .IsUnique();

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fbdafe7a-d595-42eb-8955-ab80811e8d1e"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("012202b9-61ee-494e-9099-ba6bce67aac6")
                        },
                        new
                        {
                            Id = new Guid("48208912-5cd1-4e19-9309-fc7d74bb198a"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("0146bf6c-39fa-4e3a-9e9c-2c861384b4a0")
                        },
                        new
                        {
                            Id = new Guid("d1081690-b33d-48ed-b20b-d60fb8cadbe5"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("0329e38b-c48c-48d0-9994-295db8ede606")
                        },
                        new
                        {
                            Id = new Guid("64d6cd49-3369-4885-b6b3-09782b60a3ff"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("032fddb7-a66a-44f5-8b72-d89263bd306a")
                        },
                        new
                        {
                            Id = new Guid("540c8f37-5ab4-4a16-9fae-fbcb6318459d"),
                            EnrollDay = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KidId = new Guid("04af1463-3174-4cae-b3c8-f6f85005d269")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Feeding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Feeding");
                });

            modelBuilder.Entity("KindergartenAppService.Models.FeedingKid", b =>
                {
                    b.Property<Guid>("KidId");

                    b.Property<Guid>("FeddingId");

                    b.HasKey("KidId", "FeddingId");

                    b.HasIndex("FeddingId");

                    b.ToTable("FeedingKid");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("KindergartenAppService.Models.InvoiceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<Guid?>("InvoiceId");

                    b.Property<Guid>("ItemId");

                    b.Property<decimal>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ItemId");

                    b.ToTable("InvoiceDetail");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.Property<string>("Reference")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Item");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Item");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("FatherName")
                        .IsRequired();

                    b.Property<string>("FavoriteActivities");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<Guid>("KindergarterId");

                    b.Property<string>("MotherName");

                    b.Property<string>("SecondName");

                    b.Property<int>("SiblingCount");

                    b.Property<Guid>("TutorId");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.HasIndex("TutorId");

                    b.ToTable("Kid");

                    b.HasData(
                        new
                        {
                            Id = new Guid("012202b9-61ee-494e-9099-ba6bce67aac6"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Lee",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("7a9c17fa-02ee-466e-97f8-feb6e20f599c"),
                            MotherName = "Snow",
                            SecondName = "Carlos",
                            SiblingCount = 0,
                            TutorId = new Guid("04cbeadb-e000-4b9f-80a0-ee997cbc0bf8")
                        },
                        new
                        {
                            Id = new Guid("0146bf6c-39fa-4e3a-9e9c-2c861384b4a0"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Faringtom",
                            FirstName = "Aaron",
                            KindergarterId = new Guid("7a9c17fa-02ee-466e-97f8-feb6e20f599c"),
                            MotherName = "White",
                            SecondName = "Carlos",
                            SiblingCount = 0,
                            TutorId = new Guid("04cbeadb-e000-4b9f-80a0-ee997cbc0bf8")
                        },
                        new
                        {
                            Id = new Guid("0329e38b-c48c-48d0-9994-295db8ede606"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Faringtom",
                            FirstName = "Johan",
                            KindergarterId = new Guid("7a9c17fa-02ee-466e-97f8-feb6e20f599c"),
                            MotherName = "Snow",
                            SecondName = "Eduardo",
                            SiblingCount = 0,
                            TutorId = new Guid("04cbeadb-e000-4b9f-80a0-ee997cbc0bf8")
                        },
                        new
                        {
                            Id = new Guid("032fddb7-a66a-44f5-8b72-d89263bd306a"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Stackeetam",
                            FirstName = "Johan",
                            KindergarterId = new Guid("7a9c17fa-02ee-466e-97f8-feb6e20f599c"),
                            MotherName = "White",
                            SecondName = "Carlos",
                            SiblingCount = 0,
                            TutorId = new Guid("04cbeadb-e000-4b9f-80a0-ee997cbc0bf8")
                        },
                        new
                        {
                            Id = new Guid("04af1463-3174-4cae-b3c8-f6f85005d269"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Lee",
                            FirstName = "Aaron",
                            KindergarterId = new Guid("7a9c17fa-02ee-466e-97f8-feb6e20f599c"),
                            MotherName = "Worm",
                            SecondName = "Enrique",
                            SiblingCount = 0,
                            TutorId = new Guid("04cbeadb-e000-4b9f-80a0-ee997cbc0bf8")
                        },
                        new
                        {
                            Id = new Guid("04e4690b-74b1-48ab-95df-0ac3d46580e0"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Escobar",
                            FirstName = "Johan",
                            KindergarterId = new Guid("7a9c17fa-02ee-466e-97f8-feb6e20f599c"),
                            MotherName = "Snow",
                            SecondName = "Eduardo",
                            SiblingCount = 0,
                            TutorId = new Guid("04cbeadb-e000-4b9f-80a0-ee997cbc0bf8")
                        },
                        new
                        {
                            Id = new Guid("05eada6b-ee1f-415c-927d-5dc9a76a0cd0"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Faringtom",
                            FirstName = "Aaron",
                            KindergarterId = new Guid("7a9c17fa-02ee-466e-97f8-feb6e20f599c"),
                            MotherName = "Washinton",
                            SecondName = "Emilio",
                            SiblingCount = 0,
                            TutorId = new Guid("04cbeadb-e000-4b9f-80a0-ee997cbc0bf8")
                        },
                        new
                        {
                            Id = new Guid("06095d50-99c0-4e5e-88cf-b2434b82276e"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Escobar",
                            FirstName = "Lyan",
                            KindergarterId = new Guid("7a9c17fa-02ee-466e-97f8-feb6e20f599c"),
                            MotherName = "Snow",
                            SecondName = "Enrique",
                            SiblingCount = 0,
                            TutorId = new Guid("04cbeadb-e000-4b9f-80a0-ee997cbc0bf8")
                        },
                        new
                        {
                            Id = new Guid("066f005f-1c36-433a-925b-d4be4688ea0e"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Faringtom",
                            FirstName = "Dylan",
                            KindergarterId = new Guid("7a9c17fa-02ee-466e-97f8-feb6e20f599c"),
                            MotherName = "Worm",
                            SecondName = "Eduardo",
                            SiblingCount = 0,
                            TutorId = new Guid("04cbeadb-e000-4b9f-80a0-ee997cbc0bf8")
                        },
                        new
                        {
                            Id = new Guid("0764e7eb-3c42-4217-a71d-909931b59e83"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Stackeetam",
                            FirstName = "Lyan",
                            KindergarterId = new Guid("7a9c17fa-02ee-466e-97f8-feb6e20f599c"),
                            MotherName = "Worm",
                            SecondName = "Enrique",
                            SiblingCount = 0,
                            TutorId = new Guid("04cbeadb-e000-4b9f-80a0-ee997cbc0bf8")
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kindergarter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Kindergarters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a9c17fa-02ee-466e-97f8-feb6e20f599c"),
                            Description = "KPH"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KidId");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("MedicalRecord");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Payment", b =>
                {
                    b.Property<Guid>("InvoiceId");

                    b.Property<Guid>("ReceiptId");

                    b.HasKey("InvoiceId", "ReceiptId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Precense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KidId");

                    b.Property<DateTime>("PrecenseDay");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.ToTable("Precense");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Receipt");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Stock", b =>
                {
                    b.Property<Guid>("StoreId");

                    b.Property<Guid>("ProductId");

                    b.HasKey("StoreId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.HasKey("Id");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("KindergartenAppService.Models.SubActivities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityId");

                    b.Property<DateTime>("Date");

                    b.Property<TimeSpan>("EndingTime");

                    b.Property<TimeSpan>("StaringTime");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("SubActivities");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Tutor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Mail");

                    b.Property<string>("MovilNumber");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Tutors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("04cbeadb-e000-4b9f-80a0-ee997cbc0bf8"),
                            FirstName = "Gregorio de Jesus",
                            LastName = "Rojas Acosta"
                        },
                        new
                        {
                            Id = new Guid("b7370d63-cec0-4d74-b669-d3539140c869"),
                            FirstName = "Yadira",
                            LastName = "Pinales Delgado"
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("KindergarterId");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("KindergarterId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Product", b =>
                {
                    b.HasBaseType("KindergartenAppService.Models.Item");

                    b.HasDiscriminator().HasValue("Product");
                });

            modelBuilder.Entity("KindergartenAppService.Models.Service", b =>
                {
                    b.HasBaseType("KindergartenAppService.Models.Item");

                    b.Property<Guid>("ActivityId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("ServicePeriod");

                    b.HasIndex("ActivityId");

                    b.HasDiscriminator().HasValue("Service");

                    b.HasData(
                        new
                        {
                            Id = new Guid("832baabe-ead6-41fd-b790-24719b6b6962"),
                            Price = 1758m,
                            Reference = "SRV-840",
                            ActivityId = new Guid("f0d3d0fc-a7eb-4772-9e4f-725d167014fe"),
                            Description = "Service Clases de ingles",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("0633c3f6-3a8e-4765-bfe6-3b59799c9b4d"),
                            Price = 7692m,
                            Reference = "SRV-851",
                            ActivityId = new Guid("bb6ec32c-bc6d-4286-a631-0b641cdea782"),
                            Description = "Service Cuidade matutino",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("704c6e7a-c8de-447a-bf58-e708cc79ea45"),
                            Price = 3734m,
                            Reference = "SRV-615",
                            ActivityId = new Guid("b189d9df-946e-4315-bf6f-986ca1c36e69"),
                            Description = "Service Cuidado Vespertino",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("ae20cfaf-2f2c-4c42-a84d-48b7053e014d"),
                            Price = 8703m,
                            Reference = "SRV-491",
                            ActivityId = new Guid("dec6a963-9e08-4373-9238-91713b80a7b6"),
                            Description = "Service Cuidado dia completo",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("a7598aff-7340-457e-8ac8-867501dd24b0"),
                            Price = 1116m,
                            Reference = "SRV-942",
                            ActivityId = new Guid("0d4fbdbc-6d67-4855-ac68-4a4a47c76bb4"),
                            Description = "Service Clases de Ballet",
                            ServicePeriod = 77
                        },
                        new
                        {
                            Id = new Guid("6e05a1d7-5a3d-458c-a748-2300e4cfa880"),
                            Price = 890m,
                            Reference = "SRV-941",
                            ActivityId = new Guid("4dfd6ae0-f00d-46b2-a567-2f5c94de134b"),
                            Description = "Service Clases de logica",
                            ServicePeriod = 77
                        });
                });

            modelBuilder.Entity("KindergartenAppService.Models.Activity", b =>
                {
                    b.HasOne("KindergartenAppService.Models.ActivityTemplate", "ActivityTemplate")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.ActivityTemplate", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("ActivityTemplates")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.EnrollActivity", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Enrollment", "Enrollment")
                        .WithMany("EnrollActivities")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Enrollment", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithOne("Enrollment")
                        .HasForeignKey("KindergartenAppService.Models.Enrollment", "KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.FeedingKid", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Feeding", "Fedding")
                        .WithMany("FeedingKids")
                        .HasForeignKey("FeddingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("FeedingKids")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Invoice", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany()
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.InvoiceDetail", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("KindergartenAppService.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Kid", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("Kids")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Tutor", "Tutor")
                        .WithMany("Kids")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.MedicalRecord", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Payment", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Receipt", "Receipt")
                        .WithMany("Payments")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Precense", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kid", "Kid")
                        .WithMany("Precenses")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Stock", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Product", "Product")
                        .WithMany("Stock")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KindergartenAppService.Models.Store", "Store")
                        .WithMany("Stock")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.SubActivities", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany("SubActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.User", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Kindergarter", "Kindergarter")
                        .WithMany("Users")
                        .HasForeignKey("KindergarterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KindergartenAppService.Models.Service", b =>
                {
                    b.HasOne("KindergartenAppService.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
